{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nimport replicateFromSQL from '../replicationHandler';\nPouchDB.plugin(PouchDBFind);\n\nclass CpfService {\n  constructor() {\n    let pouchDbUrl = config.couchDb.url_cpf;\n    this.db = new PouchDB('cpf');\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true\n    };\n    this.replication = replicateFromSQL(this.db, config.backend.base_url + '/fulldata/cpf/', 'cpf_date');\n\n    this.resetDb = () => undefined; // no need to reset activite\n\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.db.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n}\n\nexport default CpfService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/subservices/cpf.service.js"],"names":["PouchDB","PouchDBFind","config","replicateFromSQL","plugin","CpfService","constructor","pouchDbUrl","couchDb","url_cpf","db","opts","batch_size","live","retry","replication","backend","base_url","resetDb","undefined","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","filter","_id","split"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AAEAH,OAAO,CAACI,MAAR,CAAeH,WAAf;;AACA,MAAMI,UAAN,CAAiB;AACbC,EAAAA,WAAW,GAAG;AACV,QAAIC,UAAU,GAAGL,MAAM,CAACM,OAAP,CAAeC,OAAhC;AACA,SAAKC,EAAL,GAAU,IAAIV,OAAJ,CAAY,KAAZ,CAAV;AACA,QAAIW,IAAI,GAAG;AACPC,MAAAA,UAAU,EAAE,IADL;AAEPC,MAAAA,IAAI,EAAE,IAFC;AAGPC,MAAAA,KAAK,EAAE;AAHA,KAAX;AAKA,SAAKC,WAAL,GAAmBZ,gBAAgB,CAAC,KAAKO,EAAN,EAAUR,MAAM,CAACc,OAAP,CAAeC,QAAf,GAA0B,gBAApC,EAAsD,UAAtD,CAAnC;;AACA,SAAKC,OAAL,GAAe,MAAMC,SAArB,CATU,CASsB;;AAEnC,GAZY,CAcb;;;AACAC,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKV,EAAL,CACFW,OADE,CACM;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KADN,EAEFC,IAFE,CAEGC,KAAK,IACPA,KAAK,CAACC,IAAN,CACKC,GADL,CACSC,IAAI,IAAIA,IAAI,CAACC,GADtB,EAEKC,MAFL,CAEYF,IAAI,IAAI,EAAEA,IAAI,CAACG,GAAL,CAASC,KAAT,CAAe,GAAf,EAAoB,CAApB,KAA0B,SAA5B,CAFpB,CAHD,CAAP;AAOH;;AAvBY;;AA0BjB,eAAe3B,UAAf","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nimport replicateFromSQL from '../replicationHandler';\n\nPouchDB.plugin(PouchDBFind);\nclass CpfService {\n    constructor() {\n        let pouchDbUrl = config.couchDb.url_cpf;\n        this.db = new PouchDB('cpf');\n        var opts = {\n            batch_size: 1000,\n            live: true,\n            retry: true,\n        };\n        this.replication = replicateFromSQL(this.db, config.backend.base_url + '/fulldata/cpf/', 'cpf_date');\n        this.resetDb = () => undefined; // no need to reset activite\n\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.db\n            .allDocs({ include_docs: true, descending: true })\n            .then(table =>\n                table.rows\n                    .map(item => item.doc)\n                    .filter(item => !(item._id.split('/')[0] == '_design'))\n            );\n    }\n}\n\nexport default CpfService;"]},"metadata":{},"sourceType":"module"}