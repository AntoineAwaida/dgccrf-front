{"ast":null,"code":"var _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/preferences/trame/trame.js\";\nimport React, { Component } from 'react';\nimport { List, Icon, Dropdown } from 'semantic-ui-react';\nimport { Draggable } from 'react-beautiful-dnd';\nexport default class TrameComponent extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      taskEdited: null,\n      taskName: null\n    };\n    this.handleChangeName = this.handleChangeName.bind(this);\n  }\n\n  handleChangeName(event) {\n    this.setState({\n      taskName: event.target.value.toUpperCase()\n    });\n  }\n\n  validateName(task, name) {\n    this.props.validateName(task, name);\n    this.setState({\n      taskEdited: null,\n      taskName: null\n    });\n  }\n\n  editName(task) {\n    this.setState({\n      taskEdited: task,\n      taskName: task.title.toUpperCase()\n    });\n  }\n\n  render() {\n    console.log(this.props.taskList);\n    return React.createElement(List, {\n      className: \"responsivepadding\",\n      relaxed: true,\n      style: {\n        textAlign: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, this.props.taskList.map((task, i) => React.createElement(Draggable, {\n      key: task.id.toString(),\n      draggableId: task.id.toString(),\n      index: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, provided => React.createElement(\"div\", Object.assign({}, provided.draggableProps, provided.dragHandleProps, {\n      ref: provided.innerRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        borderRadius: 3,\n        borderBottom: '3px solid #c0c1c4',\n        margin: 15,\n        boxShadow: '6px 1px 12px 2px #cfcfcf'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(List.Item, {\n      style: {\n        borderTopLeftRadius: 3,\n        borderTopRightRadius: 3,\n        padding: 15,\n        backgroundColor: '#4286f4'\n      },\n      key: task.title // onClick={() => task.documentToFill && this.handleClick(i)}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        flex: 8,\n        color: 'white'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      disabled: task != this.state.taskEdited,\n      type: \"text\",\n      style: {\n        background: 'transparent',\n        border: '0',\n        outline: 'none',\n        color: 'white'\n      },\n      value: task != this.state.taskEdited ? task.title.toUpperCase() : this.state.taskName,\n      onChange: this.handleChangeName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), task != this.state.taskEdited ? React.createElement(Icon, {\n      style: {\n        marginLeft: 10,\n        cursor: 'pointer'\n      },\n      onClick: () => this.editName(task),\n      name: \"pencil\",\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : React.createElement(Icon, {\n      style: {\n        marginLeft: 10,\n        cursor: 'pointer'\n      },\n      onClick: () => this.validateName(task, this.state.taskName),\n      name: \"check\",\n      color: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        flex: 1,\n        textAlign: 'right'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      style: {\n        color: 'white'\n      },\n      pointing: 'right',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Dropdown.Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Dropdown.Item, {\n      onClick: () => this.props.changeType(task, 'basic'),\n      icon: task.type === 'basic' && 'check',\n      text: \"Basique\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Dropdown.Item, {\n      onClick: () => this.props.changeType(task, 'text'),\n      icon: task.type === 'text' && 'check',\n      text: \"Texte\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Dropdown.Item, {\n      onClick: () => this.props.changeType(task, 'document'),\n      icon: task.type === 'document' && 'check',\n      text: \"Document\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    })))))), React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/preferences/trame/trame.js"],"names":["React","Component","List","Icon","Dropdown","Draggable","TrameComponent","constructor","props","context","state","taskEdited","taskName","handleChangeName","bind","event","setState","target","value","toUpperCase","validateName","task","name","editName","title","render","console","log","taskList","textAlign","map","i","id","toString","provided","draggableProps","dragHandleProps","innerRef","borderRadius","borderBottom","margin","boxShadow","borderTopLeftRadius","borderTopRightRadius","padding","backgroundColor","display","width","flex","color","background","border","outline","marginLeft","cursor","changeType","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { List, Icon, Dropdown } from 'semantic-ui-react';\n\nimport { Draggable } from 'react-beautiful-dnd';\n\nexport default class TrameComponent extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      taskEdited: null,\n      taskName: null\n    };\n    this.handleChangeName = this.handleChangeName.bind(this);\n  }\n\n  handleChangeName(event) {\n    this.setState({ taskName: event.target.value.toUpperCase() });\n  }\n\n  validateName(task, name) {\n    this.props.validateName(task, name);\n    this.setState({ taskEdited: null, taskName: null });\n  }\n\n  editName(task) {\n    this.setState({\n      taskEdited: task,\n      taskName: task.title.toUpperCase()\n    });\n  }\n\n  render() {\n    console.log(this.props.taskList);\n    return (\n      <List className=\"responsivepadding\" relaxed style={{ textAlign: 'left' }}>\n        {this.props.taskList.map((task, i) => (\n          <Draggable\n            key={task.id.toString()}\n            draggableId={task.id.toString()}\n            index={i}\n          >\n            {provided => (\n              <div\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n              >\n                <div\n                  style={{\n                    borderRadius: 3,\n                    borderBottom: '3px solid #c0c1c4',\n\n                    margin: 15,\n                    boxShadow: '6px 1px 12px 2px #cfcfcf'\n                  }}\n                >\n                  <List.Item\n                    style={{\n                      borderTopLeftRadius: 3,\n                      borderTopRightRadius: 3,\n                      padding: 15,\n                      backgroundColor: '#4286f4'\n                    }}\n                    key={task.title}\n                    // onClick={() => task.documentToFill && this.handleClick(i)}\n                  >\n                    <div\n                      style={{\n                        display: 'flex',\n                        width: '100%'\n                      }}\n                    >\n                      <div style={{ flex: 1 }}>\n                        {/* {this.getIconFromStatus(task.status)} */}\n                      </div>\n                      <div style={{ flex: 8, color: 'white' }}>\n                        <input\n                          disabled={task != this.state.taskEdited}\n                          type=\"text\"\n                          style={{\n                            background: 'transparent',\n                            border: '0',\n                            outline: 'none',\n                            color: 'white'\n                          }}\n                          value={\n                            task != this.state.taskEdited\n                              ? task.title.toUpperCase()\n                              : this.state.taskName\n                          }\n                          onChange={this.handleChangeName}\n                        ></input>\n                        {task != this.state.taskEdited ? (\n                          <Icon\n                            style={{ marginLeft: 10, cursor: 'pointer' }}\n                            onClick={() => this.editName(task)}\n                            name=\"pencil\"\n                            color=\"white\"\n                          ></Icon>\n                        ) : (\n                          <Icon\n                            style={{ marginLeft: 10, cursor: 'pointer' }}\n                            onClick={() =>\n                              this.validateName(task, this.state.taskName)\n                            }\n                            name=\"check\"\n                            color=\"white\"\n                          ></Icon>\n                        )}\n                      </div>\n                      <div\n                        style={{\n                          flex: 1,\n                          textAlign: 'right'\n                        }}\n                      >\n                        <Dropdown style={{ color: 'white' }} pointing={'right'}>\n                          <Dropdown.Menu>\n                            <Dropdown.Item\n                              onClick={() =>\n                                this.props.changeType(task, 'basic')\n                              }\n                              icon={task.type === 'basic' && 'check'}\n                              text=\"Basique\"\n                            ></Dropdown.Item>\n                            <Dropdown.Item\n                              onClick={() =>\n                                this.props.changeType(task, 'text')\n                              }\n                              icon={task.type === 'text' && 'check'}\n                              text=\"Texte\"\n                            ></Dropdown.Item>\n                            <Dropdown.Item\n                              onClick={() =>\n                                this.props.changeType(task, 'document')\n                              }\n                              icon={task.type === 'document' && 'check'}\n                              text=\"Document\"\n                            ></Dropdown.Item>\n                          </Dropdown.Menu>\n                        </Dropdown>\n                        {/* {task.documentToFill &&\n                                          (this.state.activeDropdowns.includes(i) ? (\n                                              <List.Icon\n                                                  name=\"caret up\"\n                                                  style={{ color: 'white' }}\n                                              ></List.Icon>\n                                          ) : (\n                                                  <List.Icon\n                                                      name=\"caret down\"\n                                                      style={{ color: 'white' }}\n                                                  ></List.Icon>\n                                              ))} */}\n                      </div>\n                    </div>\n                  </List.Item>\n                  <List.Item>{/* dropdown */}</List.Item>\n                </div>\n              </div>\n            )}\n          </Draggable>\n        ))}\n      </List>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}