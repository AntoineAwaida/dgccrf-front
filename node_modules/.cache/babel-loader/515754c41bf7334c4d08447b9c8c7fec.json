{"ast":null,"code":"var _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/form.component.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\n\nclass FormComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = (fieldName, e, {\n      value\n    }) => {\n      let stateChanges = {};\n      stateChanges[fieldName] = value;\n      this.setState(stateChanges);\n    };\n\n    this.state = {};\n    this.renderForm = this.renderForm.bind(this);\n  }\n\n  renderForm(form) {\n    switch (form.type) {\n      case 'input':\n        return React.createElement(Form.Input, {\n          fluid: true,\n          label: form.label,\n          placeholder: form.placeholder,\n          onChange: this.handleChange.bind(this, form.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        });\n\n      case 'select':\n        return React.createElement(Form.Select, {\n          fluid: true,\n          label: form.label,\n          options: form.options,\n          placeholder: form.placeholder,\n          onChange: this.handleChange.bind(this, form.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n\n      case 'radio':\n        return React.createElement(Form.Group, {\n          inline: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }, form.label), form.options.map(option => React.createElement(Form.Radio, {\n          key: form.value,\n          label: option.label,\n          value: option.value,\n          checked: this.state[form.name] === option.value,\n          onChange: this.handleChange.bind(this, form.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        })));\n\n      case 'textarea':\n        return React.createElement(Form.TextArea, {\n          label: form.label,\n          placeholder: form.placeholder,\n          onChange: this.handleChange.bind(this, form.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        });\n\n      case 'checkbox':\n        return React.createElement(Form.Checkbox, {\n          label: form.label,\n          placeholder: form.placeholder,\n          onChange: this.handleChange.bind(this, form.name),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        });\n    }\n  }\n\n  render() {\n    return React.createElement(Form, {\n      onSubmit: () => this.props.onSubmit(this.state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.props.forms.map(formItem => {\n      if (Array.isArray(formItem)) return React.createElement(Form.Group, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, formItem.map(this.renderForm));else return this.renderForm(formItem);\n    }), React.createElement(Form.Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.submitButtonText));\n  }\n\n}\n\nFormComponent.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  submitButtonText: PropTypes.string.isRequired,\n  forms: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.objectOf({\n    type: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    options: PropTypes.array\n  }), PropTypes.arrayOf(PropTypes.objectOf({\n    type: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    label: PropTypes.string.isRequired,\n    options: PropTypes.array\n  }))])).isRequired\n};\nexport default FormComponent;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/form.component.js"],"names":["React","PropTypes","Form","FormComponent","Component","constructor","props","handleChange","fieldName","e","value","stateChanges","setState","state","renderForm","bind","form","type","label","placeholder","name","options","map","option","render","onSubmit","forms","formItem","Array","isArray","submitButtonText","propTypes","func","isRequired","string","arrayOf","oneOfType","objectOf","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\n\nclass FormComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n        this.renderForm = this.renderForm.bind(this);\n    }\n\n    handleChange = (fieldName, e, { value }) => {\n        let stateChanges = {};\n        stateChanges[fieldName] = value;\n        this.setState(stateChanges)\n    }\n\n\n    renderForm(form) {\n        switch (form.type) {\n            case 'input':\n                return <Form.Input fluid label={form.label} placeholder={form.placeholder}\n                    onChange={this.handleChange.bind(this, form.name)} />;\n            case 'select':\n                return <Form.Select fluid label={form.label} options={form.options} placeholder={form.placeholder}\n                    onChange={this.handleChange.bind(this, form.name)} />\n            case 'radio':\n                return <Form.Group inline>\n                    <label>{form.label}</label>\n                    {form.options.map(option => <Form.Radio\n                        key={form.value}\n                        label={option.label}\n                        value={option.value}\n                        checked={this.state[form.name] === option.value}\n                        onChange={this.handleChange.bind(this, form.name)}\n                    />\n\n                    )}\n                </Form.Group>\n            case 'textarea':\n                return <Form.TextArea label={form.label} placeholder={form.placeholder}\n                    onChange={this.handleChange.bind(this, form.name)} />\n            case 'checkbox':\n                return <Form.Checkbox label={form.label} placeholder={form.placeholder}\n                    onChange={this.handleChange.bind(this, form.name)} />\n        }\n    }\n\n    render() {\n        return (\n            <Form onSubmit={() => this.props.onSubmit(this.state)}>\n                {this.props.forms.map(formItem => {\n                    if (Array.isArray(formItem))\n                        return (\n                            <Form.Group widths=\"equal\">\n                                {formItem.map(this.renderForm)}\n                            </Form.Group>\n                        );\n                    else\n                        return this.renderForm(formItem);\n                }\n                )}\n                <Form.Button>{this.props.submitButtonText}</Form.Button>\n            </Form>\n        );\n    }\n}\n\nFormComponent.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    submitButtonText: PropTypes.string.isRequired,\n    forms: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.objectOf({\n            type: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            placeholder: PropTypes.string,\n            label: PropTypes.string.isRequired,\n            options: PropTypes.array\n        }),\n        PropTypes.arrayOf(PropTypes.objectOf({\n            type: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            placeholder: PropTypes.string,\n            label: PropTypes.string.isRequired,\n            options: PropTypes.array\n        }))\n    ])).isRequired\n};\n\nexport default FormComponent;"]},"metadata":{},"sourceType":"module"}