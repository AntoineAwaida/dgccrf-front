{"ast":null,"code":"var _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/dossier/index.js\";\nimport React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport InfosComponent from './infos.container';\nimport VisitesComponent from './visites.container';\nimport { PropTypes } from 'prop-types';\nimport { changeNameOfPage, changeBackUrl, changeActivePage } from '../navbar/actions';\nimport { connect } from 'react-redux';\nimport { Grid, Container } from 'semantic-ui-react';\nimport { Tabs, Tab } from '@material-ui/core';\nimport './swipeable.css';\nimport DocumentsComponent from './documents.container';\nimport MyActivityIndicator from '../../components/myActivityIndicator.component';\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\nlet visiteService = PouchDbServices.services.visite;\n\nfunction mapStateToProps() {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNameOfPage: newName => dispatch(changeNameOfPage(newName)),\n    changeBackUrl: () => dispatch(changeBackUrl('/mes-dossiers')),\n    changeActivePage: value => dispatch(changeActivePage('mesDossiers', value))\n  };\n}\n\nclass MonDossier extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = (event, value) => {\n      this.setState({\n        activeIndex: value\n      });\n    };\n\n    this.handleChangeIndex = value => {\n      this.setState({\n        activeIndex: value\n      });\n    };\n\n    this.state = {\n      activeIndex: 0,\n      dossier: null,\n      isLoading: true,\n      visitesList: null\n    };\n  }\n\n  loadDossier(dossier) {\n    this.setState({\n      dossier: dossier\n    }, () => {\n      this.state.dossier && this.props.changeNameOfPage(this.state.dossier.DOSSIER_LIBELLE);\n    });\n  }\n\n  componentDidMount() {\n    let dossierId = this.props.match.params.id;\n    visiteService.getVisitesByDossier(dossierId).then(data => this.setState({\n      visitesList: data,\n      isLoading: false\n    }));\n    visiteService.onChanges(() => this.setState({\n      isLoading: true\n    }, () => {\n      visiteService.getVisitesByDossier(dossierId).then(data => {\n        this.setState({\n          visitesList: data,\n          isLoading: false\n        });\n      });\n    }));\n    this.props.changeNameOfPage('Dossier ' + this.props.match.params.id);\n    this.props.changeBackUrl();\n    this.props.changeActivePage('/dossier/' + this.props.match.params.id);\n    dossierService.getDossierById(this.props.match.params.id).then(res => this.loadDossier(res));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        flex: 1,\n        display: 'flex',\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.dossier ? React.createElement(Container, {\n      style: {\n        overflow: 'hidden',\n        height: '100%',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      centered: true,\n      style: {\n        height: '100%',\n        flex: 1,\n        flexDirection: 'column',\n        flexWrap: 'nowrap',\n        overflow: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      style: {\n        flex: 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      value: this.state.activeIndex,\n      fullWidth: true,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      label: \"Infos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), //pas de visites si le dossier n'est pas de type enquÃªte!\n    this.state.dossier.TYPE_DOSSIER_IDENT === 3 && React.createElement(Tab, {\n      label: \"Visites\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Tab, {\n      label: \"Documents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))), React.createElement(Container, {\n      style: {\n        flex: 10,\n        overflow: 'hidden'\n      },\n      className: \"hidescrollbar responsivecontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.state.dossier.TYPE_DOSSIER_IDENT === 3 ? React.createElement(SwipeableViews, {\n      style: {\n        height: '100%'\n      },\n      slideStyle: {\n        height: '100%',\n        overflow: 'auto'\n      },\n      slideClassName: \"hidescrollbar\",\n      index: this.state.activeIndex,\n      onChangeIndex: this.handleChangeIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(InfosComponent, {\n      dossier: this.state.dossier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(VisitesComponent, Object.assign({\n      visitesList: this.state.visitesList,\n      dossierid: this.state.dossier.DOSSIER_IDENT\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(DocumentsComponent, Object.assign({\n      visitesList: this.state.visitesList,\n      dossierid: this.state.dossier.DOSSIER_IDENT\n    }, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }))) : React.createElement(SwipeableViews, {\n      style: {\n        height: '100%'\n      },\n      slideStyle: {\n        height: '100%',\n        overflow: 'auto'\n      },\n      slideClassName: \"hidescrollbar\",\n      index: this.state.activeIndex,\n      onChangeIndex: this.handleChangeIndex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(InfosComponent, {\n      dossier: this.state.dossier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(DocumentsComponent, Object.assign({}, this.props, {\n      visitesList: this.state.visitesList,\n      dossierid: this.state.dossier.DOSSIER_IDENT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    })))))) : React.createElement(MyActivityIndicator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }) // <DocumentsComponent {...this.props} />\n    );\n  }\n\n}\n\nMonDossier.propTypes = {\n  changeNameOfPage: PropTypes.func.isRequired,\n  changeBackUrl: PropTypes.func.isRequired,\n  changeActivePage: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  })\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MonDossier);","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/dossier/index.js"],"names":["React","SwipeableViews","InfosComponent","VisitesComponent","PropTypes","changeNameOfPage","changeBackUrl","changeActivePage","connect","Grid","Container","Tabs","Tab","DocumentsComponent","MyActivityIndicator","PouchDbServices","dossierService","services","dossier","visiteService","visite","mapStateToProps","mapDispatchToProps","dispatch","newName","value","MonDossier","Component","constructor","props","context","handleChange","event","setState","activeIndex","handleChangeIndex","state","isLoading","visitesList","loadDossier","DOSSIER_LIBELLE","componentDidMount","dossierId","match","params","id","getVisitesByDossier","then","data","onChanges","getDossierById","res","render","flex","display","width","height","justifyContent","overflow","flexDirection","flexWrap","TYPE_DOSSIER_IDENT","DOSSIER_IDENT","propTypes","func","isRequired","shape","string"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SwipeableViews from 'react-swipeable-views';\nimport InfosComponent from './infos.container';\nimport VisitesComponent from './visites.container';\nimport { PropTypes } from 'prop-types';\nimport {\n  changeNameOfPage,\n  changeBackUrl,\n  changeActivePage\n} from '../navbar/actions';\nimport { connect } from 'react-redux';\nimport { Grid, Container } from 'semantic-ui-react';\nimport { Tabs, Tab } from '@material-ui/core';\nimport './swipeable.css';\nimport DocumentsComponent from './documents.container';\nimport MyActivityIndicator from '../../components/myActivityIndicator.component';\n\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\nlet visiteService = PouchDbServices.services.visite;\n\nfunction mapStateToProps() {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeNameOfPage: newName => dispatch(changeNameOfPage(newName)),\n    changeBackUrl: () => dispatch(changeBackUrl('/mes-dossiers')),\n    changeActivePage: value => dispatch(changeActivePage('mesDossiers', value))\n  };\n}\n\nclass MonDossier extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      activeIndex: 0,\n      dossier: null,\n      isLoading: true,\n      visitesList: null\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({\n      activeIndex: value\n    });\n  };\n  handleChangeIndex = value => {\n    this.setState({\n      activeIndex: value\n    });\n  };\n\n  loadDossier(dossier) {\n    this.setState({ dossier: dossier }, () => {\n      this.state.dossier &&\n        this.props.changeNameOfPage(this.state.dossier.DOSSIER_LIBELLE);\n    });\n  }\n\n  componentDidMount() {\n    let dossierId = this.props.match.params.id;\n    visiteService\n      .getVisitesByDossier(dossierId)\n      .then(data => this.setState({ visitesList: data, isLoading: false }));\n    visiteService.onChanges(() =>\n      this.setState({ isLoading: true }, () => {\n        visiteService.getVisitesByDossier(dossierId).then(data => {\n          this.setState({ visitesList: data, isLoading: false });\n        });\n      })\n    );\n\n    this.props.changeNameOfPage('Dossier ' + this.props.match.params.id);\n    this.props.changeBackUrl();\n    this.props.changeActivePage('/dossier/' + this.props.match.params.id);\n    dossierService\n      .getDossierById(this.props.match.params.id)\n      .then(res => this.loadDossier(res));\n  }\n  render() {\n    return (\n      <div\n        style={{\n          flex: 1,\n          display: 'flex',\n          width: '100%',\n          height: '100%',\n          justifyContent: 'center'\n        }}\n      >\n        {this.state.dossier ? (\n          <Container\n            style={{\n              overflow: 'hidden',\n              height: '100%',\n              width: '100%'\n            }}\n          >\n            <Grid\n              centered\n              style={{\n                height: '100%',\n\n                flex: 1,\n                flexDirection: 'column',\n                flexWrap: 'nowrap',\n                overflow: 'hidden'\n              }}\n            >\n              <Grid.Row style={{ flex: 1 }}>\n                <Tabs\n                  value={this.state.activeIndex}\n                  fullWidth\n                  onChange={this.handleChange}\n                >\n                  <Tab label=\"Infos\" />\n                  {//pas de visites si le dossier n'est pas de type enquÃªte!\n                  this.state.dossier.TYPE_DOSSIER_IDENT === 3 && (\n                    <Tab label=\"Visites\" />\n                  )}\n                  <Tab label=\"Documents\" />\n                </Tabs>\n              </Grid.Row>\n              <Container\n                style={{ flex: 10, overflow: 'hidden' }}\n                className=\"hidescrollbar responsivecontainer\"\n              >\n                {this.state.dossier.TYPE_DOSSIER_IDENT === 3 ? (\n                  <SwipeableViews\n                    style={{ height: '100%' }}\n                    slideStyle={{ height: '100%', overflow: 'auto' }}\n                    slideClassName=\"hidescrollbar\"\n                    index={this.state.activeIndex}\n                    onChangeIndex={this.handleChangeIndex}\n                  >\n                    <InfosComponent dossier={this.state.dossier} />\n\n                    <VisitesComponent\n                      visitesList={this.state.visitesList}\n                      dossierid={this.state.dossier.DOSSIER_IDENT}\n                      {...this.props}\n                    />\n\n                    <DocumentsComponent\n                      visitesList={this.state.visitesList}\n                      dossierid={this.state.dossier.DOSSIER_IDENT}\n                      {...this.props}\n                    />\n                  </SwipeableViews>\n                ) : (\n                  <SwipeableViews\n                    style={{ height: '100%' }}\n                    slideStyle={{ height: '100%', overflow: 'auto' }}\n                    slideClassName=\"hidescrollbar\"\n                    index={this.state.activeIndex}\n                    onChangeIndex={this.handleChangeIndex}\n                  >\n                    <InfosComponent dossier={this.state.dossier} />\n                    <DocumentsComponent\n                      {...this.props}\n                      visitesList={this.state.visitesList}\n                      dossierid={this.state.dossier.DOSSIER_IDENT}\n                    />\n                  </SwipeableViews>\n                )}\n              </Container>\n            </Grid>\n          </Container>\n        ) : (\n          <MyActivityIndicator />\n          // <DocumentsComponent {...this.props} />\n        )}\n      </div>\n    );\n  }\n}\n\nMonDossier.propTypes = {\n  changeNameOfPage: PropTypes.func.isRequired,\n  changeBackUrl: PropTypes.func.isRequired,\n  changeActivePage: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  })\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MonDossier);\n"]},"metadata":{},"sourceType":"module"}