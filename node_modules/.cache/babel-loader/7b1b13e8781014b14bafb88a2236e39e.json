{"ast":null,"code":"var _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/fields/dossierField.component.js\";\nimport React from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\nexport default class DossierField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dossiers: [],\n      taches: [],\n      value: 'Coucou'\n    };\n  }\n\n  async handleDossierChange(codeDossier) {\n    let taches = [];\n    const dossier = await dossierService.getDossierById(codeDossier);\n\n    for (var i = 0; i < dossier.TAPR_LIBELLE.length; i += 1) {\n      if (dossier.TAPR_LIBELLE[i] !== '[*]Non défini' && taches.map(tache => tache.key).indexOf(dossier.TAPR_IDENT[i]) === -1) {\n        taches = taches.concat([{\n          text: dossier.TAPR_LIBELLE[i] + dossier.TAPR_LIBELLE_COURT[i],\n          value: parseInt(dossier.TAPR_IDENT[i]),\n          key: parseInt(dossier.TAPR_IDENT[i])\n        }]);\n      }\n    }\n\n    if (taches.length === 0) {\n      taches = [{\n        text: 'Aucun',\n        value: -1,\n        key: -1\n      }];\n    }\n\n    this.setState({\n      taches\n    });\n\n    if (taches.map(tache => tache.key).indexOf(this.props.tache) === -1) {\n      this.props.tacheChange(taches[0].key, taches[0].text);\n    }\n  }\n\n  loadDossiers(dossiers) {\n    var newDossiers = dossiers.filter(dossier => !(dossier.TYPE_DOSSIER_LIBELLE === 'Information')).map(dossier => {\n      return {\n        key: dossier.DOSSIER_IDENT,\n        text: dossier.DOSSIER_LIBELLE,\n        value: dossier.DOSSIER_IDENT\n      };\n    });\n    newDossiers = [{\n      key: -1,\n      text: 'Aucun',\n      value: -1\n    }].concat(newDossiers);\n    this.setState({\n      dossiers: newDossiers\n    });\n  }\n\n  componentDidMount() {\n    dossierService.getAllDocs().then(res => this.loadDossiers(res));\n    this.handleDossierChange(this.props.dossier);\n  }\n\n  render() {\n    return React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      required: true,\n      control: Select,\n      options: this.state.dossiers,\n      label: \"Dossier\",\n      search: true,\n      onChange: (e, data) => (this.props.dossierChange(data.value, e.currentTarget.innerText), this.handleDossierChange(data.value)),\n      defaultValue: this.props.dossier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      required: true,\n      control: Select,\n      options: this.state.taches,\n      label: \"T\\xE2che Programm\\xE9e\",\n      placeholder: \"T\\xE2che Programm\\xE9e\",\n      search: true,\n      onChange: (e, data) => {\n        this.props.tacheChange(data.value, e.currentTarget.innerText);\n      },\n      defaultValue: this.props.tache,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\nDossierField.propTypes = {\n  dossierChange: PropTypes.func.isRequired,\n  tacheChange: PropTypes.func.isRequired,\n  dossier: PropTypes.number.isRequired,\n  tache: PropTypes.number.isRequired\n};","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/fields/dossierField.component.js"],"names":["React","Form","Select","PropTypes","PouchDbServices","dossierService","services","dossier","DossierField","Component","constructor","props","state","dossiers","taches","value","handleDossierChange","codeDossier","getDossierById","i","TAPR_LIBELLE","length","map","tache","key","indexOf","TAPR_IDENT","concat","text","TAPR_LIBELLE_COURT","parseInt","setState","tacheChange","loadDossiers","newDossiers","filter","TYPE_DOSSIER_LIBELLE","DOSSIER_IDENT","DOSSIER_LIBELLE","componentDidMount","getAllDocs","then","res","render","e","data","dossierChange","currentTarget","innerText","propTypes","func","isRequired","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\n\nexport default class DossierField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dossiers: [],\n      taches: [],\n      value: 'Coucou'\n    };\n  }\n\n  async handleDossierChange(codeDossier) {\n    let taches = [];\n    const dossier = await dossierService.getDossierById(codeDossier);\n    for (var i = 0; i < dossier.TAPR_LIBELLE.length; i += 1) {\n      if (\n        dossier.TAPR_LIBELLE[i] !== '[*]Non défini' &&\n        taches.map(tache => tache.key).indexOf(dossier.TAPR_IDENT[i]) === -1\n      ) {\n        taches = taches.concat([\n          {\n            text: dossier.TAPR_LIBELLE[i] + dossier.TAPR_LIBELLE_COURT[i],\n            value: parseInt(dossier.TAPR_IDENT[i]),\n            key: parseInt(dossier.TAPR_IDENT[i])\n          }\n        ]);\n      }\n    }\n    if (taches.length === 0) {\n      taches = [{ text: 'Aucun', value: -1, key: -1 }];\n    }\n    this.setState({ taches });\n    if (taches.map(tache => tache.key).indexOf(this.props.tache) === -1) {\n      this.props.tacheChange(taches[0].key, taches[0].text);\n    }\n  }\n\n  loadDossiers(dossiers) {\n    var newDossiers = dossiers\n      .filter(dossier => !(dossier.TYPE_DOSSIER_LIBELLE === 'Information'))\n      .map(dossier => {\n        return {\n          key: dossier.DOSSIER_IDENT,\n          text: dossier.DOSSIER_LIBELLE,\n          value: dossier.DOSSIER_IDENT\n        };\n      });\n    newDossiers = [{ key: -1, text: 'Aucun', value: -1 }].concat(newDossiers);\n    this.setState({ dossiers: newDossiers });\n  }\n\n  componentDidMount() {\n    dossierService.getAllDocs().then(res => this.loadDossiers(res));\n    this.handleDossierChange(this.props.dossier);\n  }\n\n  render() {\n    return (\n      <Form.Group widths=\"equal\">\n        <Form.Field\n          required\n          control={Select}\n          options={this.state.dossiers}\n          label=\"Dossier\"\n          search\n          onChange={(e, data) => (\n            this.props.dossierChange(data.value, e.currentTarget.innerText),\n            this.handleDossierChange(data.value)\n          )}\n          defaultValue={this.props.dossier}\n        />\n        <Form.Field\n          required\n          control={Select}\n          options={this.state.taches}\n          label=\"Tâche Programmée\"\n          placeholder=\"Tâche Programmée\"\n          search\n          onChange={(e, data) => {\n            this.props.tacheChange(data.value, e.currentTarget.innerText);\n          }}\n          defaultValue={this.props.tache}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nDossierField.propTypes = {\n  dossierChange: PropTypes.func.isRequired,\n  tacheChange: PropTypes.func.isRequired,\n  dossier: PropTypes.number.isRequired,\n  tache: PropTypes.number.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}