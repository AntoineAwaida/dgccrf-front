{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar invoke_1 = __importDefault(require(\"lodash/invoke\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar BaseInput_1 = __importDefault(require(\"./BaseInput\"));\n\nvar CustomPropTypes_1 = __importDefault(require(\"../lib/CustomPropTypes\"));\n\nvar MonthRangePicker_1 = __importDefault(require(\"../pickers/monthPicker/MonthRangePicker\"));\n\nvar InputView_1 = __importDefault(require(\"../views/InputView\"));\n\nvar parse_1 = require(\"./parse\");\n\nvar DATES_SEPARATOR = ' - ';\n\nvar MonthRangeInput =\n/** @class */\nfunction (_super) {\n  __extends(MonthRangeInput, _super);\n\n  function MonthRangeInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getPicker = function () {\n      var _a = _this.props,\n          value = _a.value,\n          dateFormat = _a.dateFormat,\n          initialDate = _a.initialDate,\n          maxDate = _a.maxDate,\n          minDate = _a.minDate,\n          localization = _a.localization;\n\n      var _b = parse_1.parseDatesRange(value, dateFormat),\n          start = _b.start,\n          end = _b.end;\n\n      return React.createElement(MonthRangePicker_1.default, {\n        isPickerInFocus: _this.isPickerInFocus,\n        isTriggerInFocus: _this.isTriggerInFocus,\n        inline: _this.props.inline,\n        onCalendarViewMount: _this.onCalendarViewMount,\n        closePopup: _this.closePopup,\n        onChange: _this.handleSelect,\n        dateFormat: dateFormat,\n        initializeWith: parse_1.buildValue(start, initialDate, localization, dateFormat),\n        start: start,\n        end: end,\n        minDate: parse_1.parseValue(minDate, dateFormat, localization),\n        maxDate: parse_1.parseValue(maxDate, dateFormat, localization),\n        localization: localization,\n        onHeaderClick: function () {\n          return undefined;\n        }\n      });\n    };\n\n    _this.handleSelect = function (e, _a) {\n      var value = _a.value;\n      var dateFormat = _this.props.dateFormat;\n      var start = value.start,\n          end = value.end;\n      var outputString = '';\n\n      if (start && end) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR + end.format(dateFormat);\n      } else if (start) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR;\n      }\n\n      invoke_1.default(_this.props, 'onChange', e, __assign({}, _this.props, {\n        value: outputString,\n        date: value\n      }));\n\n      if (_this.props.closable && start && end) {\n        _this.closePopup();\n      }\n    };\n\n    _this.state = {\n      popupIsClosed: true\n    };\n    return _this;\n  }\n\n  MonthRangeInput.prototype.render = function () {\n    var _a = this.props,\n        value = _a.value,\n        dateFormat = _a.dateFormat,\n        initialDate = _a.initialDate,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        closable = _a.closable,\n        localization = _a.localization,\n        rest = __rest(_a, [\"value\", \"dateFormat\", \"initialDate\", \"maxDate\", \"minDate\", \"closable\", \"localization\"]);\n\n    return React.createElement(InputView_1.default, __assign({\n      popupIsClosed: this.state.popupIsClosed\n    }, rest, {\n      value: value,\n      onMount: this.onInputViewMount,\n      closePopup: this.closePopup,\n      openPopup: this.openPopup,\n      renderPicker: this.getPicker\n    }));\n  };\n\n  MonthRangeInput.defaultProps = __assign({}, BaseInput_1.default.defaultProps, {\n    dateFormat: 'MM-YYYY',\n    icon: 'calendar'\n  });\n  MonthRangeInput.propTypes = {\n    /** Currently selected value. */\n    value: PropTypes.string,\n\n    /** Moment date formatting string. */\n    dateFormat: PropTypes.string,\n\n    /** Date to display initially when no date is selected. */\n    initialDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Maximum date that can be selected. */\n    maxDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** Minimum date that can be selected. */\n    minDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, PropTypes.instanceOf(Date)]),\n\n    /** If true, popup closes after selecting a date-time. */\n    closable: PropTypes.bool,\n\n    /**\r\n     * Called on clear.\r\n     *\r\n     * @param {SyntheticEvent} event - React's original SyntheticEvent.\r\n     * @param {object} data - All props and proposed value.\r\n     */\n    onClear: PropTypes.func,\n\n    /** Using the clearable setting will let users remove their selection from a calendar. */\n    clearable: PropTypes.bool,\n\n    /** Optional Icon to display inside the clearable Input. */\n    clearIcon: PropTypes.any,\n\n    /** Duration of the CSS transition animation in milliseconds. */\n    duration: PropTypes.number,\n\n    /** Named animation event to used. Must be defined in CSS. */\n    animation: PropTypes.string,\n\n    /** Moment date localization. */\n    localization: PropTypes.string,\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n    iconPosition: PropTypes.oneOf(['left', 'right']),\n    hideMobileKeyboard: PropTypes.bool\n  };\n  return MonthRangeInput;\n}(BaseInput_1.default);\n\nexports.default = MonthRangeInput;","map":null,"metadata":{},"sourceType":"script"}