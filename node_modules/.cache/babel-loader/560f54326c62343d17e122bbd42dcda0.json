{"ast":null,"code":"/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor() {\n    this.changesCallbacks = [];\n    this.initDb = this.initDb.bind(this);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.documentsDB.replicate.to(config.couchDb.url_documents, {\n      live: true,\n      retry: true\n    });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n    this.db.changes({\n      since: 0,\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.documentsDB.createIndex({\n      index: {\n        fields: ['visite']\n      }\n    });\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    this.replication.stopReplication();\n    await this.db.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.documentsDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.documentsDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  getDocsByVisiteId(visiteid) {\n    return this.documentsDB.find({\n      selector: {\n        visite: {\n          $elemMatch: visiteid\n        }\n      }\n    }).then(res => res.docs);\n  }\n\n  getDocsByDossierId(dossierid) {\n    return this.documentsDB.find({\n      selector: {\n        dossier: dossierid\n      }\n    }).then(res => res.docs);\n  }\n\n  async postDocument(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.post(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async editName(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.put(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async deleteDocument(document) {\n    return await this.documentsDB.remove(document);\n  }\n\n}\n\nexport default new pouchDbDocumentsService();","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/subservices/documents.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","pouchDbDocumentsService","constructor","changesCallbacks","initDb","bind","AGENT_DD_IDENT","documentsDB","opts","live","retry","replicate","to","couchDb","url_documents","from","db","changes","since","on","map","cb","createIndex","index","fields","resetDb","replication","stopReplication","destroy","onChanges","push","getAllDocs","allDocs","include_docs","descending","then","table","rows","item","doc","filter","_id","split","getDocsByVisiteId","visiteid","find","selector","visite","$elemMatch","res","docs","getDocsByDossierId","dossierid","dossier","postDocument","document","Promise","resolve","reject","post","e","editName","put","deleteDocument","remove"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor() {\n    this.changesCallbacks = [];\n    this.initDb = this.initDb.bind(this);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.documentsDB.replicate.to(config.couchDb.url_documents, {\n      live: true,\n      retry: true\n    });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n\n    this.db.changes({\n      since: 0,\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.documentsDB.createIndex({\n      index: { fields: ['visite'] }\n    });\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    this.replication.stopReplication();\n    await this.db.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.documentsDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n  }\n  //call the callback on db changes\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.documentsDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table =>\n        table.rows\n          .map(item => item.doc)\n\n          .filter(item => !(item._id.split('/')[0] == '_design'))\n      );\n  }\n\n  getDocsByVisiteId(visiteid) {\n    return this.documentsDB\n      .find({\n        selector: {\n          visite: { $elemMatch: visiteid }\n        }\n      })\n      .then(res => res.docs);\n  }\n  getDocsByDossierId(dossierid) {\n    return this.documentsDB\n      .find({\n        selector: {\n          dossier: dossierid\n        }\n      })\n      .then(res => res.docs);\n  }\n\n  async postDocument(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.post(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async editName(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.put(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async deleteDocument(document) {\n    return await this.documentsDB.remove(document);\n  }\n}\n\nexport default new pouchDbDocumentsService();\n"]},"metadata":{},"sourceType":"module"}