{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nimport customVisitesService from './customVisites.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor(pouchDbUrl, newDbPouchDbUrl) {\n    this.db = new PouchDB('controles');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.db.replicate.to(pouchDbUrl, {\n      live: true,\n      retry: true\n    });\n    this.db.replicate.from(pouchDbUrl, opts);\n    this.db.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newDb = new PouchDB('new-controles');\n    this.newDb.replicate.to(newDbPouchDbUrl, {\n      live: true,\n      retry: true\n    });\n    this.newDb.replicate.from(newDbPouchDbUrl, opts);\n    this.newDb.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.db.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.db.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newDb.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray)));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.db.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newDb.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    return Object.keys(visitesDic).map(VISITE_IDENT => ({\n      VISITE_IDENT,\n      controles: visitesDic[VISITE_IDENT]\n    }));\n  }\n\n  postControlesByVisite(visiteInfos, controlesActionList) {\n    let promises = [];\n\n    for (let action of controlesActionList) {\n      promises.push(dossierService.getDossierIdFromActionCode(action).then(DOSSIER_IDENT => this.newDb.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT\n      }))));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default new pouchDbVisiteService(config.couchDb.url_controles, config.couchDb.url_new_controles);","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","dossierService","customVisitesService","plugin","pouchDbVisiteService","constructor","pouchDbUrl","newDbPouchDbUrl","db","opts","live","retry","replicate","to","from","createIndex","index","fields","newDb","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","firstArray","concat","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","Object","keys","postControlesByVisite","visiteInfos","controlesActionList","promises","action","getDossierIdFromActionCode","post","Promise","all","couchDb","url_controles","url_new_controles"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nimport customVisitesService from './customVisites.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n    constructor(pouchDbUrl, newDbPouchDbUrl) {\n        this.db = new PouchDB('controles');\n\n        var opts = {\n            live: true, retry: true\n        };\n        this.db.replicate.to(pouchDbUrl, { live: true, retry: true });\n        this.db.replicate.from(pouchDbUrl, opts);\n        this.db.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n\n        this.newDb = new PouchDB('new-controles');\n        this.newDb.replicate.to(newDbPouchDbUrl, { live: true, retry: true });\n        this.newDb.replicate.from(newDbPouchDbUrl, opts);\n        this.newDb.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.db.changes({\n            since: 'now',\n            live: true\n        }).on('change', cb);\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.db.allDocs({ include_docs: true, descending: true })\n            .then(table => table.rows.map(item => item.doc))\n            .then(firstArray => this.newDb.allDocs({ include_docs: true, descending: true })\n                .then(table => table.rows.map(item => item.doc).concat(firstArray))\n            );\n    }\n\n    getControlesByDossier(dossierID) {\n        return this.db.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n            .then(table => table.docs)\n            .then(firstArray => this.newDb.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n                .then(table => table.docs.concat(firstArray))\n            );\n    }\n\n    async getVisitesByDossier(dossierID) {\n        let controles = await this.getControlesByDossier(dossierID);\n        let visitesDic = {};\n        for (let controle of controles) {\n            visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n            visitesDic[controle.VISITE_IDENT].push(controle)\n        }\n        return Object.keys(visitesDic).map(VISITE_IDENT => ({ VISITE_IDENT, controles: visitesDic[VISITE_IDENT] }));\n    }\n\n    postControlesByVisite(visiteInfos, controlesActionList) {\n        let promises = [];\n        for (let action of controlesActionList) {\n            promises.push(dossierService.getDossierIdFromActionCode(action)\n                .then(DOSSIER_IDENT => this.newDb.post({ ...visiteInfos, DOSSIER_IDENT })))\n        }\n        return Promise.all(promises);\n    }\n\n}\n\nexport default new pouchDbVisiteService(config.couchDb.url_controles, config.couchDb.url_new_controles);"]},"metadata":{},"sourceType":"module"}