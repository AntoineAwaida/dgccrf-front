{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor() {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.controleDB.replicate.to(config.couchDb.url_controles, {\n      live: true,\n      retry: true\n    });\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n      live: true,\n      retry: true\n    });\n    this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.to(config.couchDb.visites, {\n      live: true,\n      retry: true\n    });\n    this.visiteDB.replicate.from(config.couchDb.visites, opts);\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == \"_design\"))));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT\n        }\n      }),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    return await visitesList;\n  }\n\n  postControlesByVisite(visiteInfos, controlesActionList) {\n    let promises = [];\n\n    for (let action of controlesActionList) {\n      promises.push(dossierService.getDossierIdFromActionCode(action).then(DOSSIER_IDENT => this.newControleDB.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT\n      }))));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default new pouchDbVisiteService();","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","dossierService","plugin","pouchDbVisiteService","constructor","controleDB","opts","live","retry","replicate","to","couchDb","url_controles","from","createIndex","index","fields","newControleDB","url_new_controles","visiteDB","visites","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","firstArray","concat","filter","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","visitesList","Object","keys","visiteData","postControlesByVisite","visiteInfos","controlesActionList","promises","action","getDossierIdFromActionCode","post","Promise","all"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n    constructor() {\n        this.controleDB = new PouchDB('controles');\n        var opts = {\n            live: true, retry: true\n        };\n        this.controleDB.replicate.to(config.couchDb.url_controles, { live: true, retry: true });\n        this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n        this.controleDB.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n\n        this.newControleDB = new PouchDB('new-controles');\n        this.newControleDB.replicate.to(config.couchDb.url_new_controles, { live: true, retry: true });\n        this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n        this.newControleDB.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n\n        this.visiteDB = new PouchDB('visites');\n        this.visiteDB.replicate.to(config.couchDb.visites, { live: true, retry: true });\n        this.visiteDB.replicate.from(config.couchDb.visites, opts);\n        this.visiteDB.createIndex({\n            index: { fields: ['VISTE_IDENT'] }\n        });\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.controleDB.changes({\n            since: 'now',\n            live: true\n        }).on('change', cb);\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.controleDB.allDocs({ include_docs: true, descending: true })\n            .then(table => table.rows.map(item => item.doc))\n            .then(firstArray => this.newControleDB.allDocs({ include_docs: true, descending: true })\n                .then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == \"_design\")))\n            );\n    }\n\n    getControlesByDossier(dossierID) {\n        return this.controleDB.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n            .then(table => table.docs)\n            .then(firstArray => this.newControleDB.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n                .then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index))\n            );\n    }\n\n    async getVisitesByDossier(dossierID) {\n        let controles = await this.getControlesByDossier(dossierID);\n        let visitesDic = {};\n        for (let controle of controles) {\n            visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n            visitesDic[controle.VISITE_IDENT].push(controle)\n        }\n        let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n            visiteData: await this.visiteDB.find({ selector: { VISITE_IDENT } }),\n            controles: visitesDic[VISITE_IDENT]\n        }))\n        return await visitesList;\n    }\n\n    postControlesByVisite(visiteInfos, controlesActionList) {\n        let promises = [];\n        for (let action of controlesActionList) {\n            promises.push(dossierService.getDossierIdFromActionCode(action)\n                .then(DOSSIER_IDENT => this.newControleDB.post({ ...visiteInfos, DOSSIER_IDENT })))\n        }\n        return Promise.all(promises);\n    }\n\n}\n\nexport default new pouchDbVisiteService();"]},"metadata":{},"sourceType":"module"}