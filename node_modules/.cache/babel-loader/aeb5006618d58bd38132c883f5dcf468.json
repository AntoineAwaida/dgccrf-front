{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    let pouchDbUrl = config.couchDb.url_dossiers;\n    this.db = new PouchDB('mes-dossiers');\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      'filter': 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT\n      }\n    };\n    this.db.replicate.from(pouchDbUrl, opts);\n    this.db.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.db.createIndex({\n      index: {\n        fields: ['ACDG_CODE_ACTION']\n      }\n    });\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.db.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.db.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => {\n      console.log(\"changed\");\n      cb();\n    });\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.db.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  getAllActionCode() {\n    return this.getAllDocs().then(array => array.map(item => item.ACDG_CODE_ACTION).filter((value, index, self) => self.indexOf(value) === index));\n  }\n\n  getDossierIdFromActionCode(actionCode) {\n    return this.db.find({\n      selector: {\n        ACDG_CODE_ACTION: actionCode\n      }\n    }).then(items => items.docs[0].DOSSIER_IDENT);\n  }\n\n  getDossierById(dossier) {\n    return this.db.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossier)\n      }\n    }).then(res => res.docs[0]);\n  }\n\n}\n\nexport default PouchDbService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/dossier.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","PouchDbService","constructor","AGENT_DD_IDENT","resetDb","bind","initDb","pouchDbUrl","couchDb","url_dossiers","db","opts","batch_size","live","retry","query_params","replicate","from","createIndex","index","fields","destroy","onChanges","cb","changes","since","on","console","log","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","filter","_id","split","getAllActionCode","array","ACDG_CODE_ACTION","value","self","indexOf","getDossierIdFromActionCode","actionCode","find","selector","items","docs","DOSSIER_IDENT","getDossierById","dossier","parseInt","res"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\n\nPouchDB.plugin(PouchDBFind);\nclass PouchDbService {\n    constructor(AGENT_DD_IDENT) {\n        this.resetDb = this.resetDb.bind(this);\n        this.initDb = this.initDb.bind(this);\n\n        this.initDb(AGENT_DD_IDENT);\n    }\n\n    async initDb(AGENT_DD_IDENT) {\n        let pouchDbUrl = config.couchDb.url_dossiers;\n        this.db = new PouchDB('mes-dossiers');\n        var opts = {\n            batch_size: 1000,\n            live: true,\n            retry: true,\n            'filter': 'filters/by_user',\n            query_params: { AGENT_DD_IDENT }\n        };\n        this.db.replicate.from(pouchDbUrl, opts);\n        this.db.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n        this.db.createIndex({\n            index: { fields: ['ACDG_CODE_ACTION'] }\n        });\n    }\n\n    async resetDb(AGENT_DD_IDENT) {\n        await this.db.destroy();\n        await this.initDb(AGENT_DD_IDENT);\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.db\n            .changes({\n                since: 'now',\n                live: true\n            })\n            .on('change', () => { console.log(\"changed\"); cb() });\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.db\n            .allDocs({ include_docs: true, descending: true })\n            .then(table =>\n                table.rows\n                    .map(item => item.doc)\n                    .filter(item => !(item._id.split('/')[0] == '_design'))\n            );\n    }\n\n    getAllActionCode() {\n        return this.getAllDocs().then(array =>\n            array\n                .map(item => item.ACDG_CODE_ACTION)\n                .filter((value, index, self) => self.indexOf(value) === index)\n        );\n    }\n\n    getDossierIdFromActionCode(actionCode) {\n        return this.db\n            .find({\n                selector: {\n                    ACDG_CODE_ACTION: actionCode\n                }\n            })\n            .then(items => items.docs[0].DOSSIER_IDENT);\n    }\n\n    getDossierById(dossier) {\n        return this.db\n            .find({\n                selector: {\n                    DOSSIER_IDENT: parseInt(dossier)\n                }\n            })\n            .then(res => res.docs[0]);\n    }\n}\n\nexport default PouchDbService;\n"]},"metadata":{},"sourceType":"module"}