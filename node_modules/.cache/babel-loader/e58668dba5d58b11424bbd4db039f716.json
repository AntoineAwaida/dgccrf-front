{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor() {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: {\n        \"AGENT_DD_IDENT\": 4447\n      }\n    };\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts1);\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n      live: true,\n      retry: true\n    });\n    this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.to(config.couchDb.url_visites, {\n      live: true,\n      retry: true\n    });\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == \"_design\"))));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT: parseInt(VISITE_IDENT)\n        }\n      }).then(table => table.docs[0]),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    console.log((await Promise.all(visitesList)));\n    return await Promise.all(visitesList);\n  }\n\n  postControlesByVisite(visiteInfos, controlesActionList) {\n    let promises = [];\n\n    for (let action of controlesActionList) {\n      promises.push(dossierService.getDossierIdFromActionCode(action).then(DOSSIER_IDENT => this.newControleDB.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT\n      }))));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default new pouchDbVisiteService();","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","dossierService","plugin","pouchDbVisiteService","constructor","controleDB","opts","live","retry","filter","query_params","replicate","from","couchDb","url_controles","opts1","createIndex","index","fields","newControleDB","to","url_new_controles","visiteDB","url_visites","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","firstArray","concat","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","visitesList","Object","keys","visiteData","console","log","Promise","all","postControlesByVisite","visiteInfos","controlesActionList","promises","action","getDossierIdFromActionCode","post"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n    constructor() {\n        this.controleDB = new PouchDB('controles');\n        var opts = {\n            live: true, retry: true,\n            filter: 'filters/by_user',\n            query_params: { \"AGENT_DD_IDENT\": 4447 }\n        };\n        this.controleDB.replicate.from(config.couchDb.url_controles, opts1);\n        this.controleDB.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n\n        this.newControleDB = new PouchDB('new-controles');\n        this.newControleDB.replicate.to(config.couchDb.url_new_controles, { live: true, retry: true });\n        this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n        this.newControleDB.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n\n        this.visiteDB = new PouchDB('visites');\n        this.visiteDB.replicate.to(config.couchDb.url_visites, { live: true, retry: true });\n        this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n        this.visiteDB.createIndex({\n            index: { fields: ['VISTE_IDENT'] }\n        });\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.controleDB.changes({\n            since: 'now',\n            live: true\n        }).on('change', cb);\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.controleDB.allDocs({ include_docs: true, descending: true })\n            .then(table => table.rows.map(item => item.doc))\n            .then(firstArray => this.newControleDB.allDocs({ include_docs: true, descending: true })\n                .then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == \"_design\")))\n            );\n    }\n\n    getControlesByDossier(dossierID) {\n        return this.controleDB.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n            .then(table => table.docs)\n            .then(firstArray => this.newControleDB.find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n                .then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index))\n            );\n    }\n\n    async getVisitesByDossier(dossierID) {\n        let controles = await this.getControlesByDossier(dossierID);\n        let visitesDic = {};\n        for (let controle of controles) {\n            visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n            visitesDic[controle.VISITE_IDENT].push(controle)\n        }\n        let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n            visiteData: await this.visiteDB.find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } }).then(table => table.docs[0]),\n            controles: visitesDic[VISITE_IDENT]\n        }))\n        console.log(await Promise.all(visitesList))\n        return await Promise.all(visitesList);\n    }\n\n    postControlesByVisite(visiteInfos, controlesActionList) {\n        let promises = [];\n        for (let action of controlesActionList) {\n            promises.push(dossierService.getDossierIdFromActionCode(action)\n                .then(DOSSIER_IDENT => this.newControleDB.post({ ...visiteInfos, DOSSIER_IDENT })))\n        }\n        return Promise.all(promises);\n    }\n\n}\n\nexport default new pouchDbVisiteService();"]},"metadata":{},"sourceType":"module"}