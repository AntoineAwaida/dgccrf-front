{"ast":null,"code":"var _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/fields/dossierField.component.js\";\nimport React from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\nexport default class DossierField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.loadDossiers = dossiers => {\n      var tabDossiersTaches = [];\n      dossiers.forEach(dossier => {\n        for (var i = 0; i < dossier.TAPR_LIBELLE.length; i += 1) {\n          if (dossier.TAPR_LIBELLE[i] !== '[*]Non défini' && tabDossiersTaches.filter(corres => corres.dossierId === dossier.DOSSIER_IDENT && corres.tacheId === dossier.TAPR_IDENT[i]).length === 0) {\n            tabDossiersTaches = tabDossiersTaches.concat([{\n              dossierId: dossier.DOSSIER_IDENT,\n              dossierText: dossier.DOSSIER_LIBELLE,\n              tacheId: dossier.TAPR_IDENT[i],\n              tacheText: dossier.TAPR_LIBELLE[i] + dossier.TAPR_LIBELLE_COURT[i]\n            }]);\n          }\n\n          if (tabDossiersTaches.filter(corres => corres.dossierId === dossier.DOSSIER_IDENT).length === 0) {\n            tabDossiersTaches = tabDossiersTaches.concat([{\n              dossierId: dossier.DOSSIER_IDENT,\n              dossierText: dossier.DOSSIER_LIBELLE,\n              tacheId: -1,\n              tacheText: 'Aucune'\n            }]);\n          }\n        }\n      });\n      this.setState({\n        tabDossiersTaches: tabDossiersTaches,\n        allTaches: tabDossiersTaches.map(corres => ({\n          key: corres.tacheId,\n          text: corres.tacheText,\n          value: corres.tacheId\n        })).filter(value => value.key !== -1)\n      }, () => this.handleDossierChange(this.props.dossier));\n      var newDossiers = dossiers.filter(dossier => !(dossier.TYPE_DOSSIER_LIBELLE === 'Information')).map(dossier => {\n        return {\n          key: dossier.DOSSIER_IDENT,\n          text: dossier.DOSSIER_LIBELLE,\n          value: dossier.DOSSIER_IDENT\n        };\n      });\n      this.setState({\n        dossiers: newDossiers,\n        optionsDossiers: newDossiers\n      });\n    };\n\n    this.handleDossierChange = codeDossier => {\n      if (codeDossier === -1) {\n        this.setState({\n          taches: this.state.allTaches\n        }, () => this.props.tacheChange(this.state.taches[0].key, this.state.taches[0].text));\n      } else {\n        this.setState({\n          taches: this.state.tabDossiersTaches.filter(corres => corres.dossierId === codeDossier).map(corres => ({\n            key: corres.tacheId,\n            text: corres.tacheText,\n            value: corres.tacheId\n          }))\n        }, () => this.props.tacheChange(this.state.taches[0].key, this.state.taches[0].text));\n      }\n    };\n\n    this.handleTacheChange = dossierSelected => {\n      this.setState({\n        optionsDossiers: this.optionsDossierField(dossierSelected)\n      });\n    };\n\n    this.optionsDossierField = dossierSelected => {\n      if (this.props.tache === 0) {\n        return this.state.dossiers;\n      }\n\n      if (dossierSelected === -1) {\n        return this.state.tabDossiersTaches.filter(corres => corres.tacheId === this.props.tache).map(corres => ({\n          key: corres.dossierId,\n          value: corres.dossierId,\n          text: corres.dossierText\n        }));\n      } else {\n        return this.state.dossiers;\n      }\n    };\n\n    this.state = {\n      dossiers: [],\n      taches: [],\n      allTaches: [],\n      tabDossiersTaches: [],\n      optionsDossiers: []\n    };\n  }\n\n  componentDidMount() {\n    dossierService.getAllDocs().then(res => this.loadDossiers(res));\n  }\n\n  render() {\n    return React.createElement(Form.Group, {\n      widths: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(Form.Field, {\n      required: true,\n      control: Select,\n      options: [{\n        key: -1,\n        text: 'Rechercher par tâche programmée',\n        value: -1\n      }].concat(this.state.optionsDossiers),\n      label: \"Dossier\",\n      search: true,\n      onChange: (e, data) => (this.props.dossierChange(data.value, e.currentTarget.innerText), this.handleDossierChange(data.value)),\n      value: this.props.dossier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      required: true,\n      control: Select,\n      options: [{\n        key: 0,\n        text: 'Rechercher par dossier',\n        value: 0\n      }].concat(this.state.taches),\n      label: \"T\\xE2che Programm\\xE9e\",\n      placeholder: \"T\\xE2che Programm\\xE9e\",\n      search: true,\n      onChange: (e, data) => (this.props.tacheChange(data.value, e.currentTarget.innerText), this.handleTacheChange(this.props.dossier)),\n      value: this.props.tache,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }));\n  }\n\n}\nDossierField.propTypes = {\n  dossierChange: PropTypes.func.isRequired,\n  tacheChange: PropTypes.func.isRequired,\n  dossier: PropTypes.number.isRequired,\n  tache: PropTypes.number.isRequired\n};","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/components/fields/dossierField.component.js"],"names":["React","Form","Select","PropTypes","PouchDbServices","dossierService","services","dossier","DossierField","Component","constructor","props","loadDossiers","dossiers","tabDossiersTaches","forEach","i","TAPR_LIBELLE","length","filter","corres","dossierId","DOSSIER_IDENT","tacheId","TAPR_IDENT","concat","dossierText","DOSSIER_LIBELLE","tacheText","TAPR_LIBELLE_COURT","setState","allTaches","map","key","text","value","handleDossierChange","newDossiers","TYPE_DOSSIER_LIBELLE","optionsDossiers","codeDossier","taches","state","tacheChange","handleTacheChange","dossierSelected","optionsDossierField","tache","componentDidMount","getAllDocs","then","res","render","e","data","dossierChange","currentTarget","innerText","propTypes","func","isRequired","number"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Select } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet dossierService = PouchDbServices.services.dossier;\n\nexport default class DossierField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dossiers: [],\n      taches: [],\n      allTaches: [],\n      tabDossiersTaches: [],\n      optionsDossiers: []\n    };\n  }\n\n  componentDidMount() {\n    dossierService.getAllDocs().then(res => this.loadDossiers(res));\n  }\n\n  loadDossiers = dossiers => {\n    var tabDossiersTaches = [];\n    dossiers.forEach(dossier => {\n      for (var i = 0; i < dossier.TAPR_LIBELLE.length; i += 1) {\n        if (\n          dossier.TAPR_LIBELLE[i] !== '[*]Non défini' &&\n          tabDossiersTaches.filter(\n            corres =>\n              corres.dossierId === dossier.DOSSIER_IDENT &&\n              corres.tacheId === dossier.TAPR_IDENT[i]\n          ).length === 0\n        ) {\n          tabDossiersTaches = tabDossiersTaches.concat([\n            {\n              dossierId: dossier.DOSSIER_IDENT,\n              dossierText: dossier.DOSSIER_LIBELLE,\n              tacheId: dossier.TAPR_IDENT[i],\n              tacheText: dossier.TAPR_LIBELLE[i] + dossier.TAPR_LIBELLE_COURT[i]\n            }\n          ]);\n        }\n        if (\n          tabDossiersTaches.filter(\n            corres => corres.dossierId === dossier.DOSSIER_IDENT\n          ).length === 0\n        ) {\n          tabDossiersTaches = tabDossiersTaches.concat([\n            {\n              dossierId: dossier.DOSSIER_IDENT,\n              dossierText: dossier.DOSSIER_LIBELLE,\n              tacheId: -1,\n              tacheText: 'Aucune'\n            }\n          ]);\n        }\n      }\n    });\n    this.setState(\n      {\n        tabDossiersTaches: tabDossiersTaches,\n        allTaches: tabDossiersTaches\n          .map(corres => ({\n            key: corres.tacheId,\n            text: corres.tacheText,\n            value: corres.tacheId\n          }))\n          .filter(value => value.key !== -1)\n      },\n      () => this.handleDossierChange(this.props.dossier)\n    );\n\n    var newDossiers = dossiers\n      .filter(dossier => !(dossier.TYPE_DOSSIER_LIBELLE === 'Information'))\n      .map(dossier => {\n        return {\n          key: dossier.DOSSIER_IDENT,\n          text: dossier.DOSSIER_LIBELLE,\n          value: dossier.DOSSIER_IDENT\n        };\n      });\n    this.setState({ dossiers: newDossiers, optionsDossiers: newDossiers });\n  };\n\n  handleDossierChange = codeDossier => {\n    if (codeDossier === -1) {\n      this.setState({ taches: this.state.allTaches }, () =>\n        this.props.tacheChange(\n          this.state.taches[0].key,\n          this.state.taches[0].text\n        )\n      );\n    } else {\n      this.setState(\n        {\n          taches: this.state.tabDossiersTaches\n            .filter(corres => corres.dossierId === codeDossier)\n            .map(corres => ({\n              key: corres.tacheId,\n              text: corres.tacheText,\n              value: corres.tacheId\n            }))\n        },\n        () =>\n          this.props.tacheChange(\n            this.state.taches[0].key,\n            this.state.taches[0].text\n          )\n      );\n    }\n  };\n\n  handleTacheChange = dossierSelected => {\n    this.setState({\n      optionsDossiers: this.optionsDossierField(dossierSelected)\n    });\n  };\n\n  optionsDossierField = dossierSelected => {\n    if (this.props.tache === 0) {\n      return this.state.dossiers;\n    }\n    if (dossierSelected === -1) {\n      return this.state.tabDossiersTaches\n        .filter(corres => corres.tacheId === this.props.tache)\n        .map(corres => ({\n          key: corres.dossierId,\n          value: corres.dossierId,\n          text: corres.dossierText\n        }));\n    } else {\n      return this.state.dossiers;\n    }\n  };\n\n  render() {\n    return (\n      <Form.Group widths=\"equal\">\n        <Form.Field\n          required\n          control={Select}\n          options={[\n            {\n              key: -1,\n              text: 'Rechercher par tâche programmée',\n              value: -1\n            }\n          ].concat(this.state.optionsDossiers)}\n          label=\"Dossier\"\n          search\n          onChange={(e, data) => (\n            this.props.dossierChange(data.value, e.currentTarget.innerText),\n            this.handleDossierChange(data.value)\n          )}\n          value={this.props.dossier}\n        />\n        <Form.Field\n          required\n          control={Select}\n          options={[\n            { key: 0, text: 'Rechercher par dossier', value: 0 }\n          ].concat(this.state.taches)}\n          label=\"Tâche Programmée\"\n          placeholder=\"Tâche Programmée\"\n          search\n          onChange={(e, data) => (\n            this.props.tacheChange(data.value, e.currentTarget.innerText),\n            this.handleTacheChange(this.props.dossier)\n          )}\n          value={this.props.tache}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nDossierField.propTypes = {\n  dossierChange: PropTypes.func.isRequired,\n  tacheChange: PropTypes.func.isRequired,\n  dossier: PropTypes.number.isRequired,\n  tache: PropTypes.number.isRequired\n};\n"]},"metadata":{},"sourceType":"module"}