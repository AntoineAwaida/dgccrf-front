{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor() {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      batch_size: 10000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT: 4447\n      }\n    };\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB = new PouchDB('new-controles'); // this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n    //   live: true,\n    //   retry: true\n    // });\n    // this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n    this.newControleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n    this.visiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == '_design'))));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT: parseInt(VISITE_IDENT)\n        }\n      }).then(table => table.docs[0]),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    return await Promise.all(visitesList);\n  }\n\n  postControlesByVisite(visiteInfos, controlesActionList) {\n    let promises = [];\n\n    for (let action of controlesActionList) {\n      promises.push(dossierService.getDossierIdFromActionCode(action).then(DOSSIER_IDENT => this.newControleDB.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT\n      }))));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default new pouchDbVisiteService();","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","dossierService","plugin","pouchDbVisiteService","constructor","controleDB","opts","batch_size","live","retry","filter","query_params","AGENT_DD_IDENT","replicate","from","couchDb","url_controles","createIndex","index","fields","newControleDB","visiteDB","url_visites","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","firstArray","concat","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","visitesList","Object","keys","visiteData","Promise","all","postControlesByVisite","visiteInfos","controlesActionList","promises","action","getDossierIdFromActionCode","post"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nimport dossierService from './dossier.service';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor() {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      batch_size: 10000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: { AGENT_DD_IDENT: 4447 }\n    };\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n\n    this.controleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n\n    this.newControleDB = new PouchDB('new-controles');\n    // this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n    //   live: true,\n    //   retry: true\n    // });\n    // this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n    this.visiteDB.createIndex({\n      index: { fields: ['VISTE_IDENT'] }\n    });\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.controleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n    this.newControleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n    this.visiteDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.controleDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table => table.rows.map(item => item.doc))\n      .then(firstArray =>\n        this.newControleDB\n          .allDocs({ include_docs: true, descending: true })\n          .then(table =>\n            table.rows\n              .map(item => item.doc)\n              .concat(firstArray)\n              .filter(item => !(item._id.split('/')[0] == '_design'))\n          )\n      );\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB\n      .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n      .then(table => table.docs)\n      .then(firstArray =>\n        this.newControleDB\n          .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n          .then(table =>\n            table.docs\n              .concat(firstArray)\n              .filter((value, index, self) => self.indexOf(value) === index)\n          )\n      );\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] =\n        visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB\n        .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n        .then(table => table.docs[0]),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    return await Promise.all(visitesList);\n  }\n\n  postControlesByVisite(visiteInfos, controlesActionList) {\n    let promises = [];\n    for (let action of controlesActionList) {\n      promises.push(\n        dossierService\n          .getDossierIdFromActionCode(action)\n          .then(DOSSIER_IDENT =>\n            this.newControleDB.post({ ...visiteInfos, DOSSIER_IDENT })\n          )\n      );\n    }\n    return Promise.all(promises);\n  }\n}\n\nexport default new pouchDbVisiteService();\n"]},"metadata":{},"sourceType":"module"}