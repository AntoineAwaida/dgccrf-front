{"ast":null,"code":"/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor(AGENT_DD_IDENT) {\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT: AGENT_DD_IDENT\n      }\n    };\n    this.documentsDB.replicate.to(config.couchDb.url_documents, {\n      live: true,\n      retry: true\n    });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n    this.documentsDB.changes({\n      since: 0,\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.documentsDB.createIndex({\n      index: {\n        fields: ['visite']\n      }\n    });\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.documentsDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.documentsDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  getDocsByVisiteId(visiteid, dossierIdList) {\n    return this.documentsDB.find({\n      selector: {\n        $or: [{\n          visite: {\n            $elemMatch: visiteid\n          }\n        }, {\n          dossier: {\n            $in: dossierIdList\n          }\n        }]\n      }\n    }).then(res => res.docs);\n  }\n\n  getDocsByDossierId(dossierid) {\n    return this.documentsDB.find({\n      selector: {\n        dossier: dossierid\n      }\n    }).then(res => res.docs);\n  }\n\n  async postDocument(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        document[\"author\"] = this.AGENT_DD_IDENT;\n        await this.documentsDB.post(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async editName(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.put(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async deleteDocument(document) {\n    return await this.documentsDB.remove(document);\n  }\n\n}\n\nexport default pouchDbDocumentsService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/subservices/documents.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","pouchDbDocumentsService","constructor","AGENT_DD_IDENT","changesCallbacks","initDb","documentsDB","opts","live","retry","filter","query_params","replicate","to","couchDb","url_documents","from","changes","since","on","map","cb","createIndex","index","fields","resetDb","destroy","onChanges","push","getAllDocs","allDocs","include_docs","descending","then","table","rows","item","doc","_id","split","getDocsByVisiteId","visiteid","dossierIdList","find","selector","$or","visite","$elemMatch","dossier","$in","res","docs","getDocsByDossierId","dossierid","postDocument","document","Promise","resolve","reject","post","e","editName","put","deleteDocument","remove"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor(AGENT_DD_IDENT) {\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: { AGENT_DD_IDENT: AGENT_DD_IDENT }\n    };\n\n    this.documentsDB.replicate.to(config.couchDb.url_documents, { live: true, retry: true });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n\n    this.documentsDB.changes({\n      since: 0,\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.documentsDB.createIndex({\n      index: { fields: ['visite'] }\n    });\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.documentsDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.documentsDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table =>\n        table.rows\n          .map(item => item.doc)\n\n          .filter(item => !(item._id.split('/')[0] == '_design'))\n      );\n  }\n\n  getDocsByVisiteId(visiteid, dossierIdList) {\n    return this.documentsDB\n      .find({\n        selector: {\n          $or: [\n            { visite: { $elemMatch: visiteid } },\n            { dossier: { $in: dossierIdList } }\n          ]\n        }\n      })\n      .then(res => res.docs);\n  }\n  getDocsByDossierId(dossierid) {\n    return this.documentsDB\n      .find({\n        selector: {\n          dossier: dossierid\n        }\n      })\n      .then(res => res.docs);\n  }\n\n  async postDocument(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        document[\"author\"] = this.AGENT_DD_IDENT;\n        await this.documentsDB.post(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async editName(document) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.put(document);\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async deleteDocument(document) {\n    return await this.documentsDB.remove(document);\n  }\n}\n\nexport default pouchDbDocumentsService;\n"]},"metadata":{},"sourceType":"module"}