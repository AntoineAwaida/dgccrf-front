{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      'filter': 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT: AGENT_DD_IDENT\n      }\n    };\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB = new PouchDB('new-controles'); // this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n    //   live: true,\n    //   retry: true\n    // });\n    // this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n    this.newControleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n    this.visiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == '_design'))));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT: parseInt(VISITE_IDENT)\n        }\n      }).then(table => table.docs[0]),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    return await Promise.all(visitesList);\n  } // postControlesByVisite(visiteInfos, controlesActionList) {\n  //   let promises = [];\n  //   for (let action of controlesActionList) {\n  //     promises.push(\n  //       dossierService\n  //         .getDossierIdFromActionCode(action)\n  //         .then(DOSSIER_IDENT =>\n  //           this.newControleDB.post({ ...visiteInfos, DOSSIER_IDENT })\n  //         )\n  //     );\n  //   }\n  //   return Promise.all(promises);\n  // }\n\n\n}\n\nexport default PouchDbVisiteService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","PouchDbVisiteService","constructor","AGENT_DD_IDENT","resetDb","bind","initDb","controleDB","destroy","newControleDB","visiteDB","opts","batch_size","live","retry","query_params","replicate","from","couchDb","url_controles","createIndex","index","fields","url_visites","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","firstArray","concat","filter","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","visitesList","Object","keys","visiteData","Promise","all"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.controleDB = new PouchDB('controles');\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      'filter': 'filters/by_user',\n      query_params: { AGENT_DD_IDENT: AGENT_DD_IDENT }\n    };\n    this.controleDB.replicate.from(config.couchDb.url_controles, opts);\n\n    this.controleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n\n    this.newControleDB = new PouchDB('new-controles');\n    // this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n    //   live: true,\n    //   retry: true\n    // });\n    // this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts);\n    this.visiteDB.createIndex({\n      index: { fields: ['VISTE_IDENT'] }\n    });\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.controleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n    this.newControleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n    this.visiteDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.controleDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table => table.rows.map(item => item.doc))\n      .then(firstArray =>\n        this.newControleDB\n          .allDocs({ include_docs: true, descending: true })\n          .then(table =>\n            table.rows\n              .map(item => item.doc)\n              .concat(firstArray)\n              .filter(item => !(item._id.split('/')[0] == '_design'))\n          )\n      );\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB\n      .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n      .then(table => table.docs)\n      .then(firstArray =>\n        this.newControleDB\n          .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n          .then(table =>\n            table.docs\n              .concat(firstArray)\n              .filter((value, index, self) => self.indexOf(value) === index)\n          )\n      );\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] =\n        visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => ({\n      visiteData: await this.visiteDB\n        .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n        .then(table => table.docs[0]),\n      controles: visitesDic[VISITE_IDENT]\n    }));\n    return await Promise.all(visitesList);\n  }\n\n  // postControlesByVisite(visiteInfos, controlesActionList) {\n  //   let promises = [];\n  //   for (let action of controlesActionList) {\n  //     promises.push(\n  //       dossierService\n  //         .getDossierIdFromActionCode(action)\n  //         .then(DOSSIER_IDENT =>\n  //           this.newControleDB.post({ ...visiteInfos, DOSSIER_IDENT })\n  //         )\n  //     );\n  //   }\n  //   return Promise.all(promises);\n  // }\n}\n\nexport default PouchDbVisiteService;\n"]},"metadata":{},"sourceType":"module"}