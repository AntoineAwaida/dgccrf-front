{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.newVisiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT: AGENT_DD_IDENT\n      }\n    };\n    this.controleDB = new PouchDB('controles');\n    this.controleInterval = replicateFromSQL(this.controleDB, config.backend.base_url + '/fulldata/controles/' + AGENT_DD_IDENT);\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n      live: true,\n      retry: true\n    });\n    this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate.from(config.couchDb.url_visites, opts).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n    this.visiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.newVisiteDB = new PouchDB('new-visites');\n    this.newVisiteDB.replicate.to(config.couchDb.url_new_visites, {\n      live: true,\n      retry: true\n    });\n    this.newVisiteDB.replicate.from(config.couchDb.url_new_visites, opts);\n    this.newVisiteDB.createIndex({\n      index: {\n        fields: ['VISITE_IDENT']\n      }\n    });\n    this.newVisiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc)).then(firstArray => this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).concat(firstArray).filter(item => !(item._id.split('/')[0] == '_design'))));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs).then(firstArray => this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    }).then(table => table.docs.concat(firstArray).filter((value, index, self) => self.indexOf(value) === index)));\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => {\n      let visiteData = await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT: parseInt(VISITE_IDENT)\n        }\n      }).then(table => table.docs[0]);\n\n      if (!visiteData) {\n        visiteData = await this.newVisiteDB.find({\n          selector: {\n            VISITE_IDENT: parseInt(VISITE_IDENT)\n          }\n        }).then(table => table.docs[0]);\n      }\n\n      if (visiteData) {\n        return {\n          visiteData,\n          controles: visitesDic[VISITE_IDENT]\n        };\n      }\n    });\n    visitesList = await Promise.all(visitesList);\n    debugger; // eslint-disable-next-line no-undefa\n\n    return visitesList.filter(doc => doc);\n  }\n\n  postControlesByVisite(visiteInfos, controlesList) {\n    let promises = [];\n    const ident = parseInt(visiteInfos.VIS_DATE.replace(/-/g, '') + visiteInfos.ETOB_SIRET);\n    promises.push(this.newVisiteDB.post(_objectSpread({}, visiteInfos, {\n      VISITE_IDENT: ident\n    })));\n\n    for (let controle of controlesList) {\n      promises.push(this.newControleDB.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT: controle.dossier,\n        CPF_CODE_PRODUIT: controle.cpf,\n        STADE_PRODUIT_IDENT: parseInt(controle.stade),\n        CONTROLE_IDENT: controle.dossier.toString() + controle.cpf.toString(),\n        VISITE_IDENT: ident\n      })));\n    }\n\n    return Promise.all(promises);\n  }\n\n}\n\nexport default PouchDbVisiteService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/subservices/visite.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","PouchDbVisiteService","constructor","AGENT_DD_IDENT","resetDb","bind","initDb","changesCallbacks","controleDB","destroy","newControleDB","visiteDB","newVisiteDB","opts","batch_size","live","retry","filter","query_params","controleInterval","replicateFromSQL","backend","base_url","createIndex","index","fields","changes","since","on","map","cb","replicate","to","couchDb","url_new_controles","from","url_visites","url_new_visites","onChanges","push","getAllDocs","allDocs","include_docs","descending","then","table","rows","item","doc","firstArray","concat","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","visitesList","Object","keys","visiteData","Promise","all","postControlesByVisite","visiteInfos","controlesList","promises","ident","VIS_DATE","replace","ETOB_SIRET","post","dossier","CPF_CODE_PRODUIT","cpf","STADE_PRODUIT_IDENT","stade","CONTROLE_IDENT","toString"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\n\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.newVisiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: { AGENT_DD_IDENT: AGENT_DD_IDENT }\n    };\n\n    this.controleDB = new PouchDB('controles');\n    this.controleInterval = replicateFromSQL(this.controleDB, config.backend.base_url + '/fulldata/controles/' + AGENT_DD_IDENT);\n    this.controleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n    this.controleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(config.couchDb.url_new_controles, {\n      live: true,\n      retry: true\n    });\n    this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n    this.newControleDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.visiteDB = new PouchDB('visites');\n    this.visiteDB.replicate\n      .from(config.couchDb.url_visites, opts)\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.visiteDB.createIndex({\n      index: { fields: ['VISTE_IDENT'] }\n    });\n    this.visiteDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.newVisiteDB = new PouchDB('new-visites');\n    this.newVisiteDB.replicate.to(config.couchDb.url_new_visites, {\n      live: true,\n      retry: true\n    });\n    this.newVisiteDB.replicate.from(config.couchDb.url_new_visites, opts);\n    this.newVisiteDB.createIndex({\n      index: { fields: ['VISITE_IDENT'] }\n    });\n    this.newVisiteDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.controleDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table => table.rows.map(item => item.doc))\n      .then(firstArray =>\n        this.newControleDB\n          .allDocs({ include_docs: true, descending: true })\n          .then(table =>\n            table.rows\n              .map(item => item.doc)\n              .concat(firstArray)\n              .filter(item => !(item._id.split('/')[0] == '_design'))\n          )\n      );\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.controleDB\n      .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n      .then(table => table.docs)\n      .then(firstArray =>\n        this.newControleDB\n          .find({ selector: { DOSSIER_IDENT: parseInt(dossierID) } })\n          .then(table =>\n            table.docs\n              .concat(firstArray)\n              .filter((value, index, self) => self.indexOf(value) === index)\n          )\n      );\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] =\n        visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => {\n      let visiteData = await this.visiteDB\n        .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n        .then(table => table.docs[0]);\n      if (!visiteData) {\n        visiteData = await this.newVisiteDB\n          .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n          .then(table => table.docs[0]);\n      }\n      if (visiteData) {\n        return {\n          visiteData,\n          controles: visitesDic[VISITE_IDENT]\n        };\n      }\n    });\n    visitesList = await Promise.all(visitesList);\n    debugger;\n    // eslint-disable-next-line no-undefa\n    return visitesList.filter(doc => doc);\n  }\n\n  postControlesByVisite(visiteInfos, controlesList) {\n    let promises = [];\n    const ident = parseInt(\n      visiteInfos.VIS_DATE.replace(/-/g, '') + visiteInfos.ETOB_SIRET\n    );\n    promises.push(\n      this.newVisiteDB.post({\n        ...visiteInfos,\n        VISITE_IDENT: ident\n      })\n    );\n    for (let controle of controlesList) {\n      promises.push(\n        this.newControleDB.post({\n          ...visiteInfos,\n          DOSSIER_IDENT: controle.dossier,\n          CPF_CODE_PRODUIT: controle.cpf,\n          STADE_PRODUIT_IDENT: parseInt(controle.stade),\n          CONTROLE_IDENT: controle.dossier.toString() + controle.cpf.toString(),\n          VISITE_IDENT: ident\n        })\n      );\n    }\n    return Promise.all(promises);\n  }\n}\n\nexport default PouchDbVisiteService;\n"]},"metadata":{},"sourceType":"module"}