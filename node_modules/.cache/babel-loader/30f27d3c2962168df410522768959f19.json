{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/visiteCreation/singleControle.container.js\";\nimport React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport DossierField from '../../components/fields/dossierField.component';\nimport StadeField from '../../components/fields/stadeField.component';\nimport CodesField from '../../components/fields/codes.component';\nexport default class SingleControleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    if (props.controle) {\n      this.state = {\n        controle: {\n          dossier: props.controle.dossier,\n          dossierText: props.controle.dossierText,\n          tache: props.controle.tache,\n          tacheText: props.controle.tacheText,\n          activite: props.controle.ACDG_IDENT,\n          activiteText: props.controle.ACDG_CODE_LIB_NIVEAU3,\n          cpf: props.controle.CPF_IDENT,\n          stade: props.controle.stade,\n          ident: props.controle.ident\n        }\n      };\n    } else {\n      this.state = {\n        controle: {\n          dossier: parseInt(this.props.dossier.id),\n          dossierText: this.props.dossier.text,\n          tache: 0,\n          tacheText: '',\n          activite: 0,\n          activiteText: '',\n          cpf: 0,\n          stade: ''\n        }\n      };\n    }\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(DossierField, {\n      dossierChange: (value, text) => this.setState({\n        controle: _objectSpread({}, this.state.controle, {\n          dossier: value,\n          dossierText: text\n        })\n      }),\n      tacheChange: (value, text) => this.setState({\n        controle: _objectSpread({}, this.state.controle, {\n          tache: value,\n          tacheText: text\n        })\n      }),\n      dossier: this.state.controle.dossier,\n      tache: this.state.controle.tache,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(CodesField, {\n      activiteChange: (e, data) => this.setState({\n        controle: _objectSpread({}, this.state.controle, {\n          activite: data.value,\n          activiteText: e.currentTarget.innerText\n        })\n      }),\n      cpfChange: (e, data) => {\n        this.setState({\n          controle: _objectSpread({}, this.state.controle, {\n            cpf: data.value\n          })\n        });\n      },\n      activite: this.state.controle.activite,\n      cpf: this.state.controle.cpf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(StadeField, {\n      onChange: (e, data) => this.setState({\n        controle: _objectSpread({}, this.state.controle, {\n          stade: data.value\n        })\n      }),\n      stade: this.state.controle.stade,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Form.Button, {\n      onClick: () => this.props.onSubmit(this.state.controle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Valider\"));\n  }\n\n}\nSingleControleComponent.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  dossier: PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string\n  }),\n  controle: PropTypes.any\n};","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/visiteCreation/singleControle.container.js"],"names":["React","Form","PropTypes","DossierField","StadeField","CodesField","SingleControleComponent","Component","constructor","props","controle","state","dossier","dossierText","tache","tacheText","activite","ACDG_IDENT","activiteText","ACDG_CODE_LIB_NIVEAU3","cpf","CPF_IDENT","stade","ident","parseInt","id","text","render","value","setState","e","data","currentTarget","innerText","onSubmit","propTypes","func","isRequired","shape","string","any"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,OAAOC,UAAP,MAAuB,8CAAvB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AAEA,eAAe,MAAMC,uBAAN,SAAsCN,KAAK,CAACO,SAA5C,CAAsD;AACnEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AACA,QAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB,WAAKC,KAAL,GAAa;AACXD,QAAAA,QAAQ,EAAE;AACRE,UAAAA,OAAO,EAAEH,KAAK,CAACC,QAAN,CAAeE,OADhB;AAERC,UAAAA,WAAW,EAAEJ,KAAK,CAACC,QAAN,CAAeG,WAFpB;AAGRC,UAAAA,KAAK,EAAEL,KAAK,CAACC,QAAN,CAAeI,KAHd;AAIRC,UAAAA,SAAS,EAAEN,KAAK,CAACC,QAAN,CAAeK,SAJlB;AAKRC,UAAAA,QAAQ,EAAEP,KAAK,CAACC,QAAN,CAAeO,UALjB;AAMRC,UAAAA,YAAY,EAAET,KAAK,CAACC,QAAN,CAAeS,qBANrB;AAORC,UAAAA,GAAG,EAAEX,KAAK,CAACC,QAAN,CAAeW,SAPZ;AAQRC,UAAAA,KAAK,EAAEb,KAAK,CAACC,QAAN,CAAeY,KARd;AASRC,UAAAA,KAAK,EAAEd,KAAK,CAACC,QAAN,CAAea;AATd;AADC,OAAb;AAaD,KAdD,MAcO;AACL,WAAKZ,KAAL,GAAa;AACXD,QAAAA,QAAQ,EAAE;AACRE,UAAAA,OAAO,EAAEY,QAAQ,CAAC,KAAKf,KAAL,CAAWG,OAAX,CAAmBa,EAApB,CADT;AAERZ,UAAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWG,OAAX,CAAmBc,IAFxB;AAGRZ,UAAAA,KAAK,EAAE,CAHC;AAIRC,UAAAA,SAAS,EAAE,EAJH;AAKRC,UAAAA,QAAQ,EAAE,CALF;AAMRE,UAAAA,YAAY,EAAE,EANN;AAORE,UAAAA,GAAG,EAAE,CAPG;AAQRE,UAAAA,KAAK,EAAE;AARC;AADC,OAAb;AAYD;AACF;;AAEDK,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AACE,MAAA,aAAa,EAAE,CAACC,KAAD,EAAQF,IAAR,KACb,KAAKG,QAAL,CAAc;AACZnB,QAAAA,QAAQ,oBACH,KAAKC,KAAL,CAAWD,QADR;AAENE,UAAAA,OAAO,EAAEgB,KAFH;AAGNf,UAAAA,WAAW,EAAEa;AAHP;AADI,OAAd,CAFJ;AAUE,MAAA,WAAW,EAAE,CAACE,KAAD,EAAQF,IAAR,KACX,KAAKG,QAAL,CAAc;AACZnB,QAAAA,QAAQ,oBACH,KAAKC,KAAL,CAAWD,QADR;AAENI,UAAAA,KAAK,EAAEc,KAFD;AAGNb,UAAAA,SAAS,EAAEW;AAHL;AADI,OAAd,CAXJ;AAmBE,MAAA,OAAO,EAAE,KAAKf,KAAL,CAAWD,QAAX,CAAoBE,OAnB/B;AAoBE,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWD,QAAX,CAAoBI,KApB7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAuBE,oBAAC,UAAD;AACE,MAAA,cAAc,EAAE,CAACgB,CAAD,EAAIC,IAAJ,KACd,KAAKF,QAAL,CAAc;AACZnB,QAAAA,QAAQ,oBACH,KAAKC,KAAL,CAAWD,QADR;AAENM,UAAAA,QAAQ,EAAEe,IAAI,CAACH,KAFT;AAGNV,UAAAA,YAAY,EAAEY,CAAC,CAACE,aAAF,CAAgBC;AAHxB;AADI,OAAd,CAFJ;AAUE,MAAA,SAAS,EAAE,CAACH,CAAD,EAAIC,IAAJ,KAAa;AACtB,aAAKF,QAAL,CAAc;AACZnB,UAAAA,QAAQ,oBACH,KAAKC,KAAL,CAAWD,QADR;AAENU,YAAAA,GAAG,EAAEW,IAAI,CAACH;AAFJ;AADI,SAAd;AAMD,OAjBH;AAkBE,MAAA,QAAQ,EAAE,KAAKjB,KAAL,CAAWD,QAAX,CAAoBM,QAlBhC;AAmBE,MAAA,GAAG,EAAE,KAAKL,KAAL,CAAWD,QAAX,CAAoBU,GAnB3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBF,EA4CE,oBAAC,UAAD;AACE,MAAA,QAAQ,EAAE,CAACU,CAAD,EAAIC,IAAJ,KACR,KAAKF,QAAL,CAAc;AACZnB,QAAAA,QAAQ,oBAAO,KAAKC,KAAL,CAAWD,QAAlB;AAA4BY,UAAAA,KAAK,EAAES,IAAI,CAACH;AAAxC;AADI,OAAd,CAFJ;AAME,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWD,QAAX,CAAoBY,KAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CF,EAoDE,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,OAAO,EAAE,MAAM,KAAKb,KAAL,CAAWyB,QAAX,CAAoB,KAAKvB,KAAL,CAAWD,QAA/B,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBApDF,CADF;AA0DD;;AA5FkE;AA+FrEJ,uBAAuB,CAAC6B,SAAxB,GAAoC;AAClCD,EAAAA,QAAQ,EAAEhC,SAAS,CAACkC,IAAV,CAAeC,UADS;AAElCzB,EAAAA,OAAO,EAAEV,SAAS,CAACoC,KAAV,CAAgB;AACvBb,IAAAA,EAAE,EAAEvB,SAAS,CAACqC,MADS;AAEvBb,IAAAA,IAAI,EAAExB,SAAS,CAACqC;AAFO,GAAhB,CAFyB;AAMlC7B,EAAAA,QAAQ,EAAER,SAAS,CAACsC;AANc,CAApC","sourcesContent":["import React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport DossierField from '../../components/fields/dossierField.component';\nimport StadeField from '../../components/fields/stadeField.component';\nimport CodesField from '../../components/fields/codes.component';\n\nexport default class SingleControleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.controle) {\n      this.state = {\n        controle: {\n          dossier: props.controle.dossier,\n          dossierText: props.controle.dossierText,\n          tache: props.controle.tache,\n          tacheText: props.controle.tacheText,\n          activite: props.controle.ACDG_IDENT,\n          activiteText: props.controle.ACDG_CODE_LIB_NIVEAU3,\n          cpf: props.controle.CPF_IDENT,\n          stade: props.controle.stade,\n          ident: props.controle.ident\n        }\n      };\n    } else {\n      this.state = {\n        controle: {\n          dossier: parseInt(this.props.dossier.id),\n          dossierText: this.props.dossier.text,\n          tache: 0,\n          tacheText: '',\n          activite: 0,\n          activiteText: '',\n          cpf: 0,\n          stade: ''\n        }\n      };\n    }\n  }\n\n  render() {\n    return (\n      <Form>\n        <DossierField\n          dossierChange={(value, text) =>\n            this.setState({\n              controle: {\n                ...this.state.controle,\n                dossier: value,\n                dossierText: text\n              }\n            })\n          }\n          tacheChange={(value, text) =>\n            this.setState({\n              controle: {\n                ...this.state.controle,\n                tache: value,\n                tacheText: text\n              }\n            })\n          }\n          dossier={this.state.controle.dossier}\n          tache={this.state.controle.tache}\n        />\n        <CodesField\n          activiteChange={(e, data) =>\n            this.setState({\n              controle: {\n                ...this.state.controle,\n                activite: data.value,\n                activiteText: e.currentTarget.innerText\n              }\n            })\n          }\n          cpfChange={(e, data) => {\n            this.setState({\n              controle: {\n                ...this.state.controle,\n                cpf: data.value\n              }\n            });\n          }}\n          activite={this.state.controle.activite}\n          cpf={this.state.controle.cpf}\n        />\n        <StadeField\n          onChange={(e, data) =>\n            this.setState({\n              controle: { ...this.state.controle, stade: data.value }\n            })\n          }\n          stade={this.state.controle.stade}\n        />\n        <Form.Button onClick={() => this.props.onSubmit(this.state.controle)}>\n          Valider\n        </Form.Button>\n      </Form>\n    );\n  }\n}\n\nSingleControleComponent.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  dossier: PropTypes.shape({\n    id: PropTypes.string,\n    text: PropTypes.string\n  }),\n  controle: PropTypes.any\n};\n"]},"metadata":{},"sourceType":"module"}