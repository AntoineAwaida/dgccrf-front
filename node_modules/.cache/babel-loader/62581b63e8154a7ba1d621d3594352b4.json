{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/visiteCreation/controles.container.js\";\nimport React from 'react';\nimport { Modal, Container, Button, Table, Message } from 'semantic-ui-react';\nimport SingleControleComponent from './singleControle.container';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet activiteService = PouchDbServices.services.activite;\nlet cpfService = PouchDbServices.services.cpf;\nexport default class ControleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.displayNoControleAlert = () => {\n      if (this.props.controles.length === 0) {\n        return React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        }, React.createElement(Table.Cell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        }, \"Aucun contrôle n'a été renseigné pour l'instant.\"));\n      } else {\n        return React.createElement(Table.Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, React.createElement(Table.Row, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, \"Dossier\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"Code Action\"), React.createElement(Table.HeaderCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        })));\n      }\n    };\n\n    this.deleteControle = controleId => {\n      this.props.changeControle(this.props.controles.filter(cont => cont.ident !== controleId));\n    };\n\n    this.displayMessage = message => {\n      if (message) {\n        return React.createElement(Message, {\n          negative: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, message));\n      }\n    };\n\n    this.state = {\n      countControl: 0,\n      addModalOpen: false,\n      addModalErrorMessage: '',\n      modifyModalOpen: false,\n      modifyModalErrorMessage: '',\n      controleModified: {}\n    };\n    this.submitAddControle = this.submitAddControle.bind(this);\n    this.submitModifyControle = this.submitModifyControle.bind(this);\n  }\n\n  async submitAddControle(controle) {\n    if (!controle.dossier || !controle.tache || !controle.activite || !controle.cpf || !controle.stade) {\n      this.setState({\n        addModalErrorMessage: 'Veuillez renseigner tous les champs obligatoires.'\n      });\n    } else {\n      controle.ident = this.state.countControl;\n      const codeCPF = await cpfService.getCpfById(controle.cpf);\n      const codeActivite = await activiteService.getActiviteById(controle.activite);\n      this.setState({\n        countCountrol: this.state.countControl + 1,\n        addModalOpen: false,\n        AddModalMessage: ''\n      });\n      this.props.changeControle(this.props.controles.concat([_objectSpread({}, controle, codeCPF, codeActivite)]));\n    }\n  }\n\n  async submitModifyControle(controle, controleId) {\n    if (!controle.dossier || !controle.tache || !controle.activite || !controle.cpf || !controle.stade) {\n      this.setState({\n        modifyModalErrorMessage: 'Veuillez renseigner tous les champs obligatoires.'\n      });\n    } else {\n      const codeCPF = await cpfService.getCpfById(controle.cpf);\n      const codeActivite = await activiteService.getActiviteById(controle.activite);\n      this.setState({\n        modifyModalOpen: false,\n        modifyModalMessage: ''\n      });\n      this.props.changeControle(this.props.controles.map(cont => {\n        if (cont.ident === controleId) {\n          return _objectSpread({}, controle, codeCPF, codeActivite);\n        } else {\n          return cont;\n        }\n      }));\n    }\n  }\n\n  render() {\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Contr\\xF4les :\"), React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        onClick: () => this.setState({\n          addModalOpen: true\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Ajouter un contr\\xF4le\"),\n      open: this.state.addModalOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Ajouter un contr\\xF4le\"), React.createElement(Button, {\n      floated: \"right\",\n      onClick: () => {\n        this.setState({\n          addModalOpen: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Close\")), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.displayMessage(this.state.addModalErrorMessage), React.createElement(SingleControleComponent, {\n      onSubmit: this.submitAddControle,\n      dossier: this.props.dossier,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(Modal, {\n      open: this.state.modifyModalOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Modifier un contr\\xF4le\"), React.createElement(Button, {\n      floated: \"right\",\n      onClick: () => {\n        this.setState({\n          modifyModalOpen: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, \"Close\")), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.displayMessage(this.state.modifyModalErrorMessage), React.createElement(SingleControleComponent, {\n      onSubmit: controle => this.submitModifyControle(controle, controle.ident),\n      controle: this.state.controleModified,\n      dossier: {\n        id: this.state.controleModified.dossier,\n        text: this.state.controleModified.dossierText\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }))), React.createElement(Table, {\n      celled: true,\n      stackable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.displayNoControleAlert(), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.props.controles.map(controle => React.createElement(Table.Row, {\n      key: controle.ident,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, controle.dossierText), React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, controle.ACDG_CODE_LIB_NIVEAU3), React.createElement(Button, {\n      icon: \"pencil\",\n      style: {\n        margin: '3px'\n      },\n      onClick: () => this.setState({\n        modifyModalOpen: true,\n        controleModified: controle\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(Button, {\n      icon: \"trash alternate\",\n      style: {\n        margin: '3px'\n      },\n      onClick: () => this.deleteControle(controle.ident),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }))))));\n  }\n\n}\nControleComponent.propTypes = {\n  changeControle: PropTypes.func.isRequired,\n  controles: PropTypes.array.isRequired,\n  dossier: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired\n  })\n};","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/containers/visiteCreation/controles.container.js"],"names":["React","Modal","Container","Button","Table","Message","SingleControleComponent","PropTypes","PouchDbServices","activiteService","services","activite","cpfService","cpf","ControleComponent","Component","constructor","props","displayNoControleAlert","controles","length","deleteControle","controleId","changeControle","filter","cont","ident","displayMessage","message","state","countControl","addModalOpen","addModalErrorMessage","modifyModalOpen","modifyModalErrorMessage","controleModified","submitAddControle","bind","submitModifyControle","controle","dossier","tache","stade","setState","codeCPF","getCpfById","codeActivite","getActiviteById","countCountrol","AddModalMessage","concat","modifyModalMessage","map","render","fontWeight","id","text","dossierText","ACDG_CODE_LIB_NIVEAU3","margin","propTypes","func","isRequired","array","shape","string"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,KAAnC,EAA0CC,OAA1C,QAAyD,mBAAzD;AACA,OAAOC,uBAAP,MAAoC,4BAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AACA,IAAIC,eAAe,GAAGD,eAAe,CAACE,QAAhB,CAAyBC,QAA/C;AACA,IAAIC,UAAU,GAAGJ,eAAe,CAACE,QAAhB,CAAyBG,GAA1C;AAEA,eAAe,MAAMC,iBAAN,SAAgCd,KAAK,CAACe,SAAtC,CAAgD;AAC7DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAcnBC,sBAdmB,GAcM,MAAM;AAC7B,UAAI,KAAKD,KAAL,CAAWE,SAAX,CAAqBC,MAArB,KAAgC,CAApC,EAAuC;AACrC,eACE,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,kDADH,CADF,CADF;AAOD,OARD,MAQO;AACL,eACE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,EAGE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,CADF,CADF;AASD;AACF,KAlCkB;;AAAA,SAoGnBC,cApGmB,GAoGFC,UAAU,IAAI;AAC7B,WAAKL,KAAL,CAAWM,cAAX,CACE,KAAKN,KAAL,CAAWE,SAAX,CAAqBK,MAArB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAeJ,UAAnD,CADF;AAGD,KAxGkB;;AAAA,SA0GnBK,cA1GmB,GA0GFC,OAAO,IAAI;AAC1B,UAAIA,OAAJ,EAAa;AACX,eACE,oBAAC,OAAD;AAAS,UAAA,QAAQ,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,OAAJ,CADF,CADF;AAKD;AACF,KAlHkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,YAAY,EAAE,CADH;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,oBAAoB,EAAE,EAHX;AAIXC,MAAAA,eAAe,EAAE,KAJN;AAKXC,MAAAA,uBAAuB,EAAE,EALd;AAMXC,MAAAA,gBAAgB,EAAE;AANP,KAAb;AAQA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;AAwBD,QAAMD,iBAAN,CAAwBG,QAAxB,EAAkC;AAChC,QACE,CAACA,QAAQ,CAACC,OAAV,IACA,CAACD,QAAQ,CAACE,KADV,IAEA,CAACF,QAAQ,CAAC5B,QAFV,IAGA,CAAC4B,QAAQ,CAAC1B,GAHV,IAIA,CAAC0B,QAAQ,CAACG,KALZ,EAME;AACA,WAAKC,QAAL,CAAc;AACZX,QAAAA,oBAAoB,EAClB;AAFU,OAAd;AAID,KAXD,MAWO;AACLO,MAAAA,QAAQ,CAACb,KAAT,GAAiB,KAAKG,KAAL,CAAWC,YAA5B;AACA,YAAMc,OAAO,GAAG,MAAMhC,UAAU,CAACiC,UAAX,CAAsBN,QAAQ,CAAC1B,GAA/B,CAAtB;AACA,YAAMiC,YAAY,GAAG,MAAMrC,eAAe,CAACsC,eAAhB,CACzBR,QAAQ,CAAC5B,QADgB,CAA3B;AAGA,WAAKgC,QAAL,CAAc;AACZK,QAAAA,aAAa,EAAE,KAAKnB,KAAL,CAAWC,YAAX,GAA0B,CAD7B;AAEZC,QAAAA,YAAY,EAAE,KAFF;AAGZkB,QAAAA,eAAe,EAAE;AAHL,OAAd;AAKA,WAAKhC,KAAL,CAAWM,cAAX,CACE,KAAKN,KAAL,CAAWE,SAAX,CAAqB+B,MAArB,CAA4B,mBACrBX,QADqB,EACRK,OADQ,EACIE,YADJ,EAA5B,CADF;AAKD;AACF;;AAED,QAAMR,oBAAN,CAA2BC,QAA3B,EAAqCjB,UAArC,EAAiD;AAC/C,QACE,CAACiB,QAAQ,CAACC,OAAV,IACA,CAACD,QAAQ,CAACE,KADV,IAEA,CAACF,QAAQ,CAAC5B,QAFV,IAGA,CAAC4B,QAAQ,CAAC1B,GAHV,IAIA,CAAC0B,QAAQ,CAACG,KALZ,EAME;AACA,WAAKC,QAAL,CAAc;AACZT,QAAAA,uBAAuB,EACrB;AAFU,OAAd;AAID,KAXD,MAWO;AACL,YAAMU,OAAO,GAAG,MAAMhC,UAAU,CAACiC,UAAX,CAAsBN,QAAQ,CAAC1B,GAA/B,CAAtB;AACA,YAAMiC,YAAY,GAAG,MAAMrC,eAAe,CAACsC,eAAhB,CACzBR,QAAQ,CAAC5B,QADgB,CAA3B;AAGA,WAAKgC,QAAL,CAAc;AACZV,QAAAA,eAAe,EAAE,KADL;AAEZkB,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAIA,WAAKlC,KAAL,CAAWM,cAAX,CACE,KAAKN,KAAL,CAAWE,SAAX,CAAqBiC,GAArB,CAAyB3B,IAAI,IAAI;AAC/B,YAAIA,IAAI,CAACC,KAAL,KAAeJ,UAAnB,EAA+B;AAC7B,mCAAYiB,QAAZ,EAAyBK,OAAzB,EAAqCE,YAArC;AACD,SAFD,MAEO;AACL,iBAAOrB,IAAP;AACD;AACF,OAND,CADF;AASD;AACF;;AAiBD4B,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE,oBAAC,KAAD;AACE,MAAA,OAAO,EACL,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKX,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAE;AAAhB,SAAd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFJ;AAME,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE,YANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAQE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKY,QAAL,CAAc;AAAEZ,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CARF,EAmBE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKJ,cAAL,CAAoB,KAAKE,KAAL,CAAWG,oBAA/B,CADH,EAEE,oBAAC,uBAAD;AACE,MAAA,QAAQ,EAAE,KAAKI,iBADjB;AAEE,MAAA,OAAO,EAAE,KAAKnB,KAAL,CAAWuB,OAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAnBF,CAFF,EA6BE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAE,KAAKX,KAAL,CAAWI,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKU,QAAL,CAAc;AAAEV,UAAAA,eAAe,EAAE;AAAnB,SAAd;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CADF,EAYE,oBAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKN,cAAL,CAAoB,KAAKE,KAAL,CAAWK,uBAA/B,CADH,EAEE,oBAAC,uBAAD;AACE,MAAA,QAAQ,EAAEK,QAAQ,IAChB,KAAKD,oBAAL,CAA0BC,QAA1B,EAAoCA,QAAQ,CAACb,KAA7C,CAFJ;AAIE,MAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWM,gBAJvB;AAKE,MAAA,OAAO,EAAE;AACPoB,QAAAA,EAAE,EAAE,KAAK1B,KAAL,CAAWM,gBAAX,CAA4BK,OADzB;AAEPgB,QAAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWM,gBAAX,CAA4BsB;AAF3B,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAZF,CA7BF,EAuDE,oBAAC,KAAD;AAAO,MAAA,MAAM,MAAb;AAAc,MAAA,SAAS,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKvC,sBAAL,EADH,EAEE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKD,KAAL,CAAWE,SAAX,CAAqBiC,GAArB,CAAyBb,QAAQ,IAChC,oBAAC,KAAD,CAAO,GAAP;AAAW,MAAA,GAAG,EAAEA,QAAQ,CAACb,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaa,QAAQ,CAACkB,WAAtB,CADF,EAEE,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAalB,QAAQ,CAACmB,qBAAtB,CAFF,EAGE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,OAAO,EAAE,MACP,KAAKhB,QAAL,CAAc;AACZV,QAAAA,eAAe,EAAE,IADL;AAEZE,QAAAA,gBAAgB,EAAEI;AAFN,OAAd,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAaE,oBAAC,MAAD;AACE,MAAA,IAAI,EAAC,iBADP;AAEE,MAAA,KAAK,EAAE;AAAEoB,QAAAA,MAAM,EAAE;AAAV,OAFT;AAGE,MAAA,OAAO,EAAE,MAAM,KAAKtC,cAAL,CAAoBkB,QAAQ,CAACb,KAA7B,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADD,CADH,CAFF,CAvDF,CADF;AAoFD;;AAzM4D;AA4M/DZ,iBAAiB,CAAC8C,SAAlB,GAA8B;AAC5BrC,EAAAA,cAAc,EAAEhB,SAAS,CAACsD,IAAV,CAAeC,UADH;AAE5B3C,EAAAA,SAAS,EAAEZ,SAAS,CAACwD,KAAV,CAAgBD,UAFC;AAG5BtB,EAAAA,OAAO,EAAEjC,SAAS,CAACyD,KAAV,CAAgB;AACvBT,IAAAA,EAAE,EAAEhD,SAAS,CAAC0D,MAAV,CAAiBH,UADE;AAEvBN,IAAAA,IAAI,EAAEjD,SAAS,CAAC0D,MAAV,CAAiBH;AAFA,GAAhB;AAHmB,CAA9B","sourcesContent":["import React from 'react';\nimport { Modal, Container, Button, Table, Message } from 'semantic-ui-react';\nimport SingleControleComponent from './singleControle.container';\nimport PropTypes from 'prop-types';\nimport PouchDbServices from '../../services';\nlet activiteService = PouchDbServices.services.activite;\nlet cpfService = PouchDbServices.services.cpf;\n\nexport default class ControleComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countControl: 0,\n      addModalOpen: false,\n      addModalErrorMessage: '',\n      modifyModalOpen: false,\n      modifyModalErrorMessage: '',\n      controleModified: {}\n    };\n    this.submitAddControle = this.submitAddControle.bind(this);\n    this.submitModifyControle = this.submitModifyControle.bind(this);\n  }\n\n  displayNoControleAlert = () => {\n    if (this.props.controles.length === 0) {\n      return (\n        <Table.Row>\n          <Table.Cell>\n            {\"Aucun contrôle n'a été renseigné pour l'instant.\"}\n          </Table.Cell>\n        </Table.Row>\n      );\n    } else {\n      return (\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Dossier</Table.HeaderCell>\n            <Table.HeaderCell>Code Action</Table.HeaderCell>\n            <Table.HeaderCell></Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n      );\n    }\n  };\n\n  async submitAddControle(controle) {\n    if (\n      !controle.dossier ||\n      !controle.tache ||\n      !controle.activite ||\n      !controle.cpf ||\n      !controle.stade\n    ) {\n      this.setState({\n        addModalErrorMessage:\n          'Veuillez renseigner tous les champs obligatoires.'\n      });\n    } else {\n      controle.ident = this.state.countControl;\n      const codeCPF = await cpfService.getCpfById(controle.cpf);\n      const codeActivite = await activiteService.getActiviteById(\n        controle.activite\n      );\n      this.setState({\n        countCountrol: this.state.countControl + 1,\n        addModalOpen: false,\n        AddModalMessage: ''\n      });\n      this.props.changeControle(\n        this.props.controles.concat([\n          { ...controle, ...codeCPF, ...codeActivite }\n        ])\n      );\n    }\n  }\n\n  async submitModifyControle(controle, controleId) {\n    if (\n      !controle.dossier ||\n      !controle.tache ||\n      !controle.activite ||\n      !controle.cpf ||\n      !controle.stade\n    ) {\n      this.setState({\n        modifyModalErrorMessage:\n          'Veuillez renseigner tous les champs obligatoires.'\n      });\n    } else {\n      const codeCPF = await cpfService.getCpfById(controle.cpf);\n      const codeActivite = await activiteService.getActiviteById(\n        controle.activite\n      );\n      this.setState({\n        modifyModalOpen: false,\n        modifyModalMessage: ''\n      });\n      this.props.changeControle(\n        this.props.controles.map(cont => {\n          if (cont.ident === controleId) {\n            return { ...controle, ...codeCPF, ...codeActivite };\n          } else {\n            return cont;\n          }\n        })\n      );\n    }\n  }\n\n  deleteControle = controleId => {\n    this.props.changeControle(\n      this.props.controles.filter(cont => cont.ident !== controleId)\n    );\n  };\n\n  displayMessage = message => {\n    if (message) {\n      return (\n        <Message negative>\n          <p>{message}</p>\n        </Message>\n      );\n    }\n  };\n  render() {\n    return (\n      <Container>\n        <p style={{ fontWeight: 'bold' }}>Contrôles :</p>\n        <Modal\n          trigger={\n            <Button onClick={() => this.setState({ addModalOpen: true })}>\n              Ajouter un contrôle\n            </Button>\n          }\n          open={this.state.addModalOpen}\n        >\n          <Modal.Header>\n            <span>Ajouter un contrôle</span>\n            <Button\n              floated=\"right\"\n              onClick={() => {\n                this.setState({ addModalOpen: false });\n              }}\n            >\n              Close\n            </Button>\n          </Modal.Header>\n          <Modal.Content>\n            {this.displayMessage(this.state.addModalErrorMessage)}\n            <SingleControleComponent\n              onSubmit={this.submitAddControle}\n              dossier={this.props.dossier}\n            />\n          </Modal.Content>\n        </Modal>\n        <Modal open={this.state.modifyModalOpen}>\n          <Modal.Header>\n            <span>Modifier un contrôle</span>\n            <Button\n              floated=\"right\"\n              onClick={() => {\n                this.setState({ modifyModalOpen: false });\n              }}\n            >\n              Close\n            </Button>\n          </Modal.Header>\n          <Modal.Content>\n            {this.displayMessage(this.state.modifyModalErrorMessage)}\n            <SingleControleComponent\n              onSubmit={controle =>\n                this.submitModifyControle(controle, controle.ident)\n              }\n              controle={this.state.controleModified}\n              dossier={{\n                id: this.state.controleModified.dossier,\n                text: this.state.controleModified.dossierText\n              }}\n            />\n          </Modal.Content>\n        </Modal>\n        <Table celled stackable>\n          {this.displayNoControleAlert()}\n          <Table.Body>\n            {this.props.controles.map(controle => (\n              <Table.Row key={controle.ident}>\n                <Table.Cell>{controle.dossierText}</Table.Cell>\n                <Table.Cell>{controle.ACDG_CODE_LIB_NIVEAU3}</Table.Cell>\n                <Button\n                  icon=\"pencil\"\n                  style={{ margin: '3px' }}\n                  onClick={() =>\n                    this.setState({\n                      modifyModalOpen: true,\n                      controleModified: controle\n                    })\n                  }\n                ></Button>\n                <Button\n                  icon=\"trash alternate\"\n                  style={{ margin: '3px' }}\n                  onClick={() => this.deleteControle(controle.ident)}\n                ></Button>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n}\n\nControleComponent.propTypes = {\n  changeControle: PropTypes.func.isRequired,\n  controles: PropTypes.array.isRequired,\n  dossier: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired\n  })\n};\n"]},"metadata":{},"sourceType":"module"}