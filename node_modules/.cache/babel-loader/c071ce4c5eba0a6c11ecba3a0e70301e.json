{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.onChanges = this.onChanges.bind(this);\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    let pouchDbUrl = config.couchDb.url_dossiers;\n    this.db = new PouchDB('mes-dossiers');\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      'filter': 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT\n      }\n    };\n    this.db.replicate.from(pouchDbUrl, opts).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.db.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.db.createIndex({\n      index: {\n        fields: ['ACDG_CODE_ACTION']\n      }\n    });\n    this.db.changes({\n      since: 0,\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.db.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.db.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  getAllActionCode() {\n    return this.getAllDocs().then(array => array.map(item => item.ACDG_CODE_ACTION).filter((value, index, self) => self.indexOf(value) === index));\n  }\n\n  getDossierIdFromActionCode(actionCode) {\n    return this.db.find({\n      selector: {\n        ACDG_CODE_ACTION: actionCode\n      }\n    }).then(items => items.docs[0].DOSSIER_IDENT);\n  }\n\n  getDossierById(dossier) {\n    return this.db.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossier)\n      }\n    }).then(res => res.docs[0]);\n  }\n\n}\n\nexport default PouchDbService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/dossier.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","PouchDbService","constructor","AGENT_DD_IDENT","resetDb","bind","initDb","onChanges","changesCallbacks","pouchDbUrl","couchDb","url_dossiers","db","opts","batch_size","live","retry","query_params","replicate","from","on","map","cb","createIndex","index","fields","changes","since","destroy","push","getAllDocs","allDocs","include_docs","descending","then","table","rows","item","doc","filter","_id","split","getAllActionCode","array","ACDG_CODE_ACTION","value","self","indexOf","getDossierIdFromActionCode","actionCode","find","selector","items","docs","DOSSIER_IDENT","getDossierById","dossier","parseInt","res"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\n\nPouchDB.plugin(PouchDBFind);\nclass PouchDbService {\n    constructor(AGENT_DD_IDENT) {\n        this.resetDb = this.resetDb.bind(this);\n        this.initDb = this.initDb.bind(this);\n        this.onChanges = this.onChanges.bind(this);\n\n        this.changesCallbacks = [];\n\n        this.initDb(AGENT_DD_IDENT);\n    }\n\n    async initDb(AGENT_DD_IDENT) {\n        let pouchDbUrl = config.couchDb.url_dossiers;\n        this.db = new PouchDB('mes-dossiers');\n        var opts = {\n            batch_size: 1000,\n            live: true,\n            retry: true,\n            'filter': 'filters/by_user',\n            query_params: { AGENT_DD_IDENT }\n        };\n\n        this.db.replicate.from(pouchDbUrl, opts)\n            .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n        this.db.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n        this.db.createIndex({\n            index: { fields: ['ACDG_CODE_ACTION'] }\n        });\n\n        this.db.changes({\n            since: 0,\n            live: true\n        }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    }\n\n    async resetDb(AGENT_DD_IDENT) {\n        await this.db.destroy();\n        await this.initDb(AGENT_DD_IDENT);\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.changesCallbacks.push(cb);\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.db\n            .allDocs({ include_docs: true, descending: true })\n            .then(table =>\n                table.rows\n                    .map(item => item.doc)\n                    .filter(item => !(item._id.split('/')[0] == '_design'))\n            );\n    }\n\n    getAllActionCode() {\n        return this.getAllDocs().then(array =>\n            array\n                .map(item => item.ACDG_CODE_ACTION)\n                .filter((value, index, self) => self.indexOf(value) === index)\n        );\n    }\n\n    getDossierIdFromActionCode(actionCode) {\n        return this.db\n            .find({\n                selector: {\n                    ACDG_CODE_ACTION: actionCode\n                }\n            })\n            .then(items => items.docs[0].DOSSIER_IDENT);\n    }\n\n    getDossierById(dossier) {\n        return this.db\n            .find({\n                selector: {\n                    DOSSIER_IDENT: parseInt(dossier)\n                }\n            })\n            .then(res => res.docs[0]);\n    }\n}\n\nexport default PouchDbService;\n"]},"metadata":{},"sourceType":"module"}