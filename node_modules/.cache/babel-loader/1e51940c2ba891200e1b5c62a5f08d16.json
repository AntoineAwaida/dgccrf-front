{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDBService {\n  constructor(props, context) {\n    this.initDb = this.initDb.bind(this);\n    this.changesCallbacks = [];\n    this.initDb();\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.trameDB.destroy();\n    await this.initDb();\n  }\n\n  async initDb() {\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true\n    };\n    this.trameDB = new PouchDB('trames');\n    this.trameDB.replicate.from(config.couchDb.url_trames, opts).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.trameDB.replicate.to(config.couchDb.url_trames, opts).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.trameDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n  }\n\n  getTrameById(id) {\n    return this.trameDB.find({\n      selector: {\n        _id: id\n      }\n    }).then(res => res.docs);\n  }\n\n  getAllDocs() {\n    return this.trameDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  async postDocument(document) {\n    return await this.trameDB.post(document);\n  }\n\n}\n\nexport default PouchDBService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/trame.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","PouchDBService","constructor","props","context","initDb","bind","changesCallbacks","resetDb","AGENT_DD_IDENT","trameDB","destroy","opts","batch_size","live","retry","replicate","from","couchDb","url_trames","on","map","cb","to","changes","since","getTrameById","id","find","selector","_id","then","res","docs","getAllDocs","allDocs","include_docs","descending","table","rows","item","doc","filter","split","postDocument","document","post"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEAF,OAAO,CAACG,MAAR,CAAeF,WAAf;;AAEA,MAAMG,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AAEA,SAAKC,gBAAL,GAAwB,EAAxB;AAEA,SAAKF,MAAL;AACD;;AAED,QAAMG,OAAN,CAAcC,cAAd,EAA8B;AAC5B,UAAM,KAAKC,OAAL,CAAaC,OAAb,EAAN;AACA,UAAM,KAAKN,MAAL,EAAN;AACD;;AAED,QAAMA,MAAN,GAAe;AACb,QAAIO,IAAI,GAAG;AACTC,MAAAA,UAAU,EAAE,IADH;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAX;AAMA,SAAKL,OAAL,GAAe,IAAIb,OAAJ,CAAY,QAAZ,CAAf;AACA,SAAKa,OAAL,CAAaM,SAAb,CACGC,IADH,CACQlB,MAAM,CAACmB,OAAP,CAAeC,UADvB,EACmCP,IADnC,EAEGQ,EAFH,CAEM,QAFN,EAEgB,MAAM,KAAKb,gBAAL,CAAsBc,GAAtB,CAA0BC,EAAE,IAAIA,EAAE,EAAlC,CAFtB;AAIA,SAAKZ,OAAL,CAAaM,SAAb,CACGO,EADH,CACMxB,MAAM,CAACmB,OAAP,CAAeC,UADrB,EACiCP,IADjC,EAEGQ,EAFH,CAEM,QAFN,EAEgB,MAAM,KAAKb,gBAAL,CAAsBc,GAAtB,CAA0BC,EAAE,IAAIA,EAAE,EAAlC,CAFtB;AAIA,SAAKZ,OAAL,CACGc,OADH,CACW;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPX,MAAAA,IAAI,EAAE;AAFC,KADX,EAKGM,EALH,CAKM,QALN,EAKgB,MAAM,KAAKb,gBAAL,CAAsBc,GAAtB,CAA0BC,EAAE,IAAIA,EAAE,EAAlC,CALtB;AAMD;;AAEDI,EAAAA,YAAY,CAACC,EAAD,EAAK;AACf,WAAO,KAAKjB,OAAL,CACJkB,IADI,CACC;AACJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,GAAG,EAAEH;AADG;AADN,KADD,EAMJI,IANI,CAMCC,GAAG,IAAIA,GAAG,CAACC,IANZ,CAAP;AAOD;;AAEDC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKxB,OAAL,CACJyB,OADI,CACI;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KADJ,EAEJN,IAFI,CAECO,KAAK,IACTA,KAAK,CAACC,IAAN,CACGlB,GADH,CACOmB,IAAI,IAAIA,IAAI,CAACC,GADpB,EAEGC,MAFH,CAEUF,IAAI,IAAI,EAAEA,IAAI,CAACV,GAAL,CAASa,KAAT,CAAe,GAAf,EAAoB,CAApB,KAA0B,SAA5B,CAFlB,CAHG,CAAP;AAOD;;AAED,QAAMC,YAAN,CAAmBC,QAAnB,EAA6B;AAC3B,WAAO,MAAM,KAAKnC,OAAL,CAAaoC,IAAb,CAAkBD,QAAlB,CAAb;AACD;;AA5DkB;;AA+DrB,eAAe5C,cAAf","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\n\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDBService {\n  constructor(props, context) {\n    this.initDb = this.initDb.bind(this);\n\n    this.changesCallbacks = [];\n\n    this.initDb();\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    await this.trameDB.destroy();\n    await this.initDb();\n  }\n\n  async initDb() {\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true\n    };\n\n    this.trameDB = new PouchDB('trames');\n    this.trameDB.replicate\n      .from(config.couchDb.url_trames, opts)\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.trameDB.replicate\n      .to(config.couchDb.url_trames, opts)\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.trameDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n  }\n\n  getTrameById(id) {\n    return this.trameDB\n      .find({\n        selector: {\n          _id: id\n        }\n      })\n      .then(res => res.docs);\n  }\n\n  getAllDocs() {\n    return this.trameDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table =>\n        table.rows\n          .map(item => item.doc)\n          .filter(item => !(item._id.split('/')[0] == '_design'))\n      );\n  }\n\n  async postDocument(document) {\n    return await this.trameDB.post(document);\n  }\n}\n\nexport default PouchDBService;\n"]},"metadata":{},"sourceType":"module"}