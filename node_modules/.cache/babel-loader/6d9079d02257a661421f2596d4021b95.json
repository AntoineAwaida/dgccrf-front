{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor() {\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.documentsDB.replicate.to(config.couchDb.url_documents, {\n      live: true,\n      retry: true\n    });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.documentsDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.documentsDB.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc).filter(item => !(item._id.split('/')[0] == '_design')));\n  }\n\n  async postDocument(document, type, name) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.post({\n          document: document,\n          author: 4447,\n          dossier: 2440825,\n          visite: [],\n          type: type,\n          name: name\n        });\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n}\n\nexport default new pouchDbDocumentsService();","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/documents.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","pouchDbDocumentsService","constructor","documentsDB","opts","live","retry","replicate","to","couchDb","url_documents","from","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","filter","_id","split","postDocument","document","type","name","Promise","resolve","reject","post","author","dossier","visite","e"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACAF,OAAO,CAACG,MAAR,CAAeF,WAAf;;AAEA,MAAMG,uBAAN,CAA8B;AAC5BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,WAAL,GAAmB,IAAIN,OAAJ,CAAY,WAAZ,CAAnB;AACA,QAAIO,IAAI,GAAG;AACTC,MAAAA,IAAI,EAAE,IADG;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAX;AAIA,SAAKH,WAAL,CAAiBI,SAAjB,CAA2BC,EAA3B,CAA8BT,MAAM,CAACU,OAAP,CAAeC,aAA7C,EAA4D;AAC1DL,MAAAA,IAAI,EAAE,IADoD;AAE1DC,MAAAA,KAAK,EAAE;AAFmD,KAA5D;AAIA,SAAKH,WAAL,CAAiBI,SAAjB,CAA2BI,IAA3B,CAAgCZ,MAAM,CAACU,OAAP,CAAeC,aAA/C,EAA8DN,IAA9D;AACD,GAZ2B,CAc5B;;;AACAQ,EAAAA,SAAS,CAACC,EAAD,EAAK;AACZ,SAAKV,WAAL,CACGW,OADH,CACW;AACPC,MAAAA,KAAK,EAAE,KADA;AAEPV,MAAAA,IAAI,EAAE;AAFC,KADX,EAKGW,EALH,CAKM,QALN,EAKgBH,EALhB;AAMD,GAtB2B,CAwB5B;;;AACAI,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKd,WAAL,CACJe,OADI,CACI;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KADJ,EAEJC,IAFI,CAECC,KAAK,IACTA,KAAK,CAACC,IAAN,CACGC,GADH,CACOC,IAAI,IAAIA,IAAI,CAACC,GADpB,EAGGC,MAHH,CAGUF,IAAI,IAAI,EAAEA,IAAI,CAACG,GAAL,CAASC,KAAT,CAAe,GAAf,EAAoB,CAApB,KAA0B,SAA5B,CAHlB,CAHG,CAAP;AAQD;;AAED,QAAMC,YAAN,CAAmBC,QAAnB,EAA6BC,IAA7B,EAAmCC,IAAnC,EAAyC;AACvC,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAM,KAAKjC,WAAL,CAAiBkC,IAAjB,CAAsB;AAC1BN,UAAAA,QAAQ,EAAEA,QADgB;AAE1BO,UAAAA,MAAM,EAAE,IAFkB;AAG1BC,UAAAA,OAAO,EAAE,OAHiB;AAI1BC,UAAAA,MAAM,EAAE,EAJkB;AAK1BR,UAAAA,IAAI,EAAEA,IALoB;AAM1BC,UAAAA,IAAI,EAAEA;AANoB,SAAtB,CAAN;AAQAE,QAAAA,OAAO;AACR,OAVD,CAUE,OAAOM,CAAP,EAAU;AACVL,QAAAA,MAAM,CAACK,CAAD,CAAN;AACD;AACF,KAdM,CAAP;AAeD;;AApD2B;;AAuD9B,eAAe,IAAIxC,uBAAJ,EAAf","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbDocumentsService {\n  constructor() {\n    this.documentsDB = new PouchDB('documents');\n    var opts = {\n      live: true,\n      retry: true\n    };\n    this.documentsDB.replicate.to(config.couchDb.url_documents, {\n      live: true,\n      retry: true\n    });\n    this.documentsDB.replicate.from(config.couchDb.url_documents, opts);\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.documentsDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', cb);\n  }\n\n  //getAllDocsOfTheDB\n  getAllDocs() {\n    return this.documentsDB\n      .allDocs({ include_docs: true, descending: true })\n      .then(table =>\n        table.rows\n          .map(item => item.doc)\n\n          .filter(item => !(item._id.split('/')[0] == '_design'))\n      );\n  }\n\n  async postDocument(document, type, name) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await this.documentsDB.post({\n          document: document,\n          author: 4447,\n          dossier: 2440825,\n          visite: [],\n          type: type,\n          name: name\n        });\n        resolve();\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\nexport default new pouchDbDocumentsService();\n"]},"metadata":{},"sourceType":"module"}