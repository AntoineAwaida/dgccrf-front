{"ast":null,"code":"import _objectSpread from \"/Users/antoine/Documents/DGCCRF/dgccrf-front/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\n/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport replicateFromSQL from '../replicationHandler';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.postControlesByVisite = this.postControlesByVisite.bind(this);\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    this.controleReplication.stopReplication();\n    this.visiteReplication.stopReplication();\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.newVisiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: {\n        AGENT_DD_IDENT: AGENT_DD_IDENT\n      }\n    };\n    var opts_without_filter = {\n      batch_size: 1000,\n      live: true,\n      retry: true\n    };\n    this.controleDB = new PouchDB('controles');\n    this.controleReplication = replicateFromSQL(this.controleDB, config.backend.base_url + '/fulldata/controles?idAgent=' + AGENT_DD_IDENT, 'controle_date');\n    this.controleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.controleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(config.couchDb.url_new_controles, opts_without_filter);\n    this.newControleDB.replicate.from(config.couchDb.url_new_controles, opts);\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n    this.newControleDB.createIndex({\n      index: {\n        fields: ['VISITE_IDENT']\n      }\n    });\n    this.newControleDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.visiteDB = new PouchDB('visites');\n    this.visiteReplication = replicateFromSQL(this.visiteDB, config.backend.base_url + '/fulldata/visites?idAgent=' + AGENT_DD_IDENT, 'visite_date');\n    this.visiteDB.createIndex({\n      index: {\n        fields: ['VISTE_IDENT']\n      }\n    });\n    this.visiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n    this.newVisiteDB = new PouchDB('new-visites');\n    this.newVisiteDB.replicate.to(config.couchDb.url_new_visites, opts_without_filter);\n    this.newVisiteDB.replicate.from(config.couchDb.url_new_visites, opts);\n    this.newVisiteDB.createIndex({\n      index: {\n        fields: ['VISITE_IDENT']\n      }\n    });\n    this.newVisiteDB.changes({\n      since: 'now',\n      live: true\n    }).on('change', () => this.changesCallbacks.map(cb => cb()));\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  } //getAllDocsOfTheDB\n\n\n  async getAllDocs() {\n    let firstArray = await this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    });\n    firstArray = firstArray.rows.map(item => item.doc);\n    let secondArray = await this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    });\n    secondArray = secondArray.rows.map(item => item.doc);\n    return secondArray.concat(firstArray).filter(item => !(item._id.split('/')[0] == '_design'));\n  }\n\n  async getControlesByDossier(dossierID) {\n    let firstArray = await this.controleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    });\n    firstArray = firstArray.docs;\n    let secondArray = await this.newControleDB.find({\n      selector: {\n        DOSSIER_IDENT: parseInt(dossierID)\n      }\n    });\n    secondArray = secondArray.docs;\n    return firstArray.concat(secondArray).filter((value, index, self) => self.indexOf(value) === index);\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => {\n      let visiteData = await this.visiteDB.find({\n        selector: {\n          VISITE_IDENT: parseInt(VISITE_IDENT)\n        }\n      }).then(table => table.docs[0]);\n\n      if (!visiteData) {\n        visiteData = await this.newVisiteDB.find({\n          selector: {\n            VISITE_IDENT: parseInt(VISITE_IDENT)\n          }\n        }).then(table => table.docs[0]);\n      }\n\n      if (visiteData) {\n        return {\n          visiteData,\n          controles: visitesDic[VISITE_IDENT]\n        };\n      }\n    });\n    visitesList = await Promise.all(visitesList); // eslint-disable-next-line no-undefa\n\n    return visitesList.filter(doc => doc);\n  }\n\n  associateTrame(visite, trame) {\n    this.newVisiteDB.put(_objectSpread({}, visite.visiteData, {\n      trame: trame\n    }));\n  }\n\n  updateTrame(visite, rev, trame) {\n    return this.newVisiteDB.put(_objectSpread({}, visite, {\n      _rev: rev,\n      trame: trame\n    }));\n  }\n\n  getVisiteById(visiteid) {\n    return this.newVisiteDB.find({\n      selector: {\n        VISITE_IDENT: parseInt(visiteid)\n      }\n    }).then(res => res.docs[0]);\n  }\n\n  postControlesByVisite(visiteInfos, controlesList) {\n    let promises = [];\n    const ident = parseInt(Date.now().toString() + this.AGENT_DD_IDENT.toString());\n    promises.push(this.newVisiteDB.post(_objectSpread({}, visiteInfos, {\n      VISITE_IDENT: ident,\n      new_visite: true,\n      AGENT_DD_IDENT: this.AGENT_DD_IDENT\n    })));\n\n    for (let controle of controlesList) {\n      promises.push(this.newControleDB.post(_objectSpread({}, visiteInfos, {\n        DOSSIER_IDENT: controle.dossier,\n        CPF_CODE_PRODUIT: controle.cpf,\n        STADE_PRODUIT_IDENT: parseInt(controle.stade),\n        CONTROLE_IDENT: controle.dossier.toString() + controle.cpf.toString(),\n        VISITE_IDENT: ident,\n        AGENT_DD_IDENT: this.AGENT_DD_IDENT\n      })));\n    }\n\n    return Promise.all(promises);\n  }\n\n  async exportToSora(VISITE_IDENT) {\n    let visiteToExport = this.newVisiteDB.find({\n      selector: {\n        VISITE_IDENT: parseInt(VISITE_IDENT)\n      }\n    }).then(res => res.docs[0]);\n    this.newVisiteDB.put(_objectSpread({}, visiteToExport, {\n      new_visite: false,\n      toBeExported: true\n    }));\n  }\n\n}\n\nexport default PouchDbVisiteService;","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/subservices/visite.service.js"],"names":["PouchDB","PouchDBFind","replicateFromSQL","config","plugin","PouchDbVisiteService","constructor","AGENT_DD_IDENT","resetDb","bind","initDb","postControlesByVisite","changesCallbacks","controleReplication","stopReplication","visiteReplication","controleDB","destroy","newControleDB","visiteDB","newVisiteDB","opts","batch_size","live","retry","filter","query_params","opts_without_filter","backend","base_url","createIndex","index","fields","changes","since","on","map","cb","replicate","to","couchDb","url_new_controles","from","url_new_visites","onChanges","push","getAllDocs","firstArray","allDocs","include_docs","descending","rows","item","doc","secondArray","concat","_id","split","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","parseInt","docs","value","self","indexOf","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","visitesList","Object","keys","visiteData","then","table","Promise","all","associateTrame","visite","trame","put","updateTrame","rev","_rev","getVisiteById","visiteid","res","visiteInfos","controlesList","promises","ident","Date","now","toString","post","new_visite","dossier","CPF_CODE_PRODUIT","cpf","STADE_PRODUIT_IDENT","stade","CONTROLE_IDENT","exportToSora","visiteToExport","toBeExported"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport replicateFromSQL from '../replicationHandler';\nimport config from '../../config';\nPouchDB.plugin(PouchDBFind);\n\nclass PouchDbVisiteService {\n  constructor(AGENT_DD_IDENT) {\n    this.resetDb = this.resetDb.bind(this);\n    this.initDb = this.initDb.bind(this);\n    this.postControlesByVisite = this.postControlesByVisite.bind(this);\n\n    this.changesCallbacks = [];\n    this.initDb(AGENT_DD_IDENT);\n  }\n\n  async resetDb(AGENT_DD_IDENT) {\n    this.controleReplication.stopReplication();\n    this.visiteReplication.stopReplication();\n    await this.controleDB.destroy();\n    await this.newControleDB.destroy();\n    await this.visiteDB.destroy();\n    await this.newVisiteDB.destroy();\n    await this.initDb(AGENT_DD_IDENT);\n  }\n\n  async initDb(AGENT_DD_IDENT) {\n    this.AGENT_DD_IDENT = AGENT_DD_IDENT;\n    var opts = {\n      batch_size: 1000,\n      live: true,\n      retry: true,\n      filter: 'filters/by_user',\n      query_params: { AGENT_DD_IDENT: AGENT_DD_IDENT }\n    };\n\n    var opts_without_filter = {\n      batch_size: 1000,\n      live: true,\n      retry: true\n    };\n\n    this.controleDB = new PouchDB('controles');\n    this.controleReplication = replicateFromSQL(\n      this.controleDB,\n      config.backend.base_url + '/fulldata/controles?idAgent=' + AGENT_DD_IDENT,\n      'controle_date'\n    );\n    this.controleDB.createIndex({\n      index: { fields: ['DOSSIER_IDENT'] }\n    });\n    this.controleDB\n      .changes({ since: 'now', live: true })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n\n    this.newControleDB = new PouchDB('new-controles');\n    this.newControleDB.replicate.to(\n      config.couchDb.url_new_controles,\n      opts_without_filter\n    );\n    this.newControleDB.replicate.from(\n      config.couchDb.url_new_controles,\n      opts\n    );\n    this.newControleDB.createIndex({ index: { fields: ['DOSSIER_IDENT'] } });\n    this.newControleDB.createIndex({ index: { fields: ['VISITE_IDENT'] } });\n    this.newControleDB\n      .changes({ since: 'now', live: true })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n    this.visiteDB = new PouchDB('visites');\n    this.visiteReplication = replicateFromSQL(\n      this.visiteDB,\n      config.backend.base_url + '/fulldata/visites?idAgent=' + AGENT_DD_IDENT,\n      'visite_date'\n    );\n    this.visiteDB.createIndex({\n      index: { fields: ['VISTE_IDENT'] }\n    });\n    this.visiteDB\n      .changes({\n        since: 'now',\n        live: true\n      })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n\n\n    this.newVisiteDB = new PouchDB('new-visites');\n    this.newVisiteDB.replicate.to(\n      config.couchDb.url_new_visites,\n      opts_without_filter\n    );\n    this.newVisiteDB.replicate.from(\n      config.couchDb.url_new_visites,\n      opts\n    );\n    this.newVisiteDB.createIndex({\n      index: { fields: ['VISITE_IDENT'] }\n    });\n    this.newVisiteDB\n      .changes({ since: 'now', live: true })\n      .on('change', () => this.changesCallbacks.map(cb => cb()));\n  }\n\n  //call the callback on db changes\n  onChanges(cb) {\n    this.changesCallbacks.push(cb);\n  }\n\n  //getAllDocsOfTheDB\n  async getAllDocs() {\n    let firstArray = await this.controleDB.allDocs({\n      include_docs: true,\n      descending: true\n    });\n    firstArray = firstArray.rows.map(item => item.doc);\n    let secondArray = await this.newControleDB.allDocs({\n      include_docs: true,\n      descending: true\n    });\n    secondArray = secondArray.rows.map(item => item.doc);\n\n    return secondArray\n      .concat(firstArray)\n      .filter(item => !(item._id.split('/')[0] == '_design'));\n  }\n\n  async getControlesByDossier(dossierID) {\n    let firstArray = await this.controleDB.find({\n      selector: { DOSSIER_IDENT: parseInt(dossierID) }\n    });\n    firstArray = firstArray.docs;\n    let secondArray = await this.newControleDB.find({\n      selector: { DOSSIER_IDENT: parseInt(dossierID) }\n    });\n    secondArray = secondArray.docs;\n    return firstArray\n      .concat(secondArray)\n      .filter((value, index, self) => self.indexOf(value) === index);\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] =\n        visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n    let visitesList = Object.keys(visitesDic).map(async VISITE_IDENT => {\n      let visiteData = await this.visiteDB\n        .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n        .then(table => table.docs[0]);\n      if (!visiteData) {\n        visiteData = await this.newVisiteDB\n          .find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } })\n          .then(table => table.docs[0]);\n      }\n      if (visiteData) {\n        return {\n          visiteData,\n          controles: visitesDic[VISITE_IDENT]\n        };\n      }\n    });\n    visitesList = await Promise.all(visitesList);\n    // eslint-disable-next-line no-undefa\n    return visitesList.filter(doc => doc);\n  }\n\n  associateTrame(visite, trame) {\n    this.newVisiteDB.put({\n      ...visite.visiteData,\n      trame: trame\n    });\n  }\n\n  updateTrame(visite, rev, trame) {\n    return this.newVisiteDB.put({\n      ...visite,\n      _rev: rev,\n      trame: trame\n    });\n  }\n\n  getVisiteById(visiteid) {\n    return this.newVisiteDB\n      .find({ selector: { VISITE_IDENT: parseInt(visiteid) } })\n      .then(res => res.docs[0]);\n  }\n\n  postControlesByVisite(visiteInfos, controlesList) {\n    let promises = [];\n    const ident = parseInt(Date.now().toString() + this.AGENT_DD_IDENT.toString());\n    promises.push(\n      this.newVisiteDB.post({\n        ...visiteInfos,\n        VISITE_IDENT: ident,\n        new_visite: true,\n        AGENT_DD_IDENT: this.AGENT_DD_IDENT\n      })\n    );\n    for (let controle of controlesList) {\n      promises.push(\n        this.newControleDB.post({\n          ...visiteInfos,\n          DOSSIER_IDENT: controle.dossier,\n          CPF_CODE_PRODUIT: controle.cpf,\n          STADE_PRODUIT_IDENT: parseInt(controle.stade),\n          CONTROLE_IDENT: controle.dossier.toString() + controle.cpf.toString(),\n          VISITE_IDENT: ident,\n          AGENT_DD_IDENT: this.AGENT_DD_IDENT\n        })\n      );\n    }\n    return Promise.all(promises);\n  }\n\n  async exportToSora(VISITE_IDENT) {\n    let visiteToExport = this.newVisiteDB.find({ selector: { VISITE_IDENT: parseInt(VISITE_IDENT) } }).then(res => res.docs[0]);\n    this.newVisiteDB.put({ ...visiteToExport, new_visite: false, toBeExported: true });\n  }\n}\n\nexport default PouchDbVisiteService;\n"]},"metadata":{},"sourceType":"module"}