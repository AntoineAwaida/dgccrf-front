{"ast":null,"code":"import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n  constructor(pouchDbUrl) {\n    this.db = new PouchDB('controles');\n    var opts = {\n      live: true,\n      retry: true,\n      filter: 'filter/by_agent',\n      query_params: {\n        \"agent\": 4447\n      }\n    };\n    this.db.replicate.to(pouchDbUrl, {\n      live: true,\n      retry: true\n    });\n    this.db.replicate.from(pouchDbUrl, opts);\n    this.db.createIndex({\n      index: {\n        fields: ['DOSSIER_IDENT']\n      }\n    });\n  } //call the callback on db changes\n\n\n  onChanges(cb) {\n    this.db.changes({\n      since: 'now',\n      live: true\n    }).on('change', cb);\n  } //getAllDocsOfTheDB\n\n\n  getAllDocs() {\n    return this.db.allDocs({\n      include_docs: true,\n      descending: true\n    }).then(table => table.rows.map(item => item.doc));\n  }\n\n  getControlesByDossier(dossierID) {\n    return this.db.find({\n      selector: {\n        DOSSIER_IDENT: dossierID.toString()\n      }\n    }).then(table => table.docs);\n  }\n\n  async getVisitesByDossier(dossierID) {\n    let controles = await this.getControlesByDossier(dossierID);\n    let visitesDic = {};\n\n    for (let controle of controles) {\n      visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n      visitesDic[controle.VISITE_IDENT].push(controle);\n    }\n\n    return Object.keys(visitesDic).map(VISITE_IDENT => ({\n      VISITE_IDENT,\n      controles: visitesDic[VISITE_IDENT]\n    }));\n  }\n\n}\n\nexport default new pouchDbVisiteService(config.couchDb.url_controles);","map":{"version":3,"sources":["/Users/antoine/Documents/DGCCRF/dgccrf-front/src/services/visite.service.js"],"names":["PouchDB","PouchDBFind","config","plugin","pouchDbVisiteService","constructor","pouchDbUrl","db","opts","live","retry","filter","query_params","replicate","to","from","createIndex","index","fields","onChanges","cb","changes","since","on","getAllDocs","allDocs","include_docs","descending","then","table","rows","map","item","doc","getControlesByDossier","dossierID","find","selector","DOSSIER_IDENT","toString","docs","getVisitesByDossier","controles","visitesDic","controle","VISITE_IDENT","push","Object","keys","couchDb","url_controles"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACAF,OAAO,CAACG,MAAR,CAAeF,WAAf;;AAEA,MAAMG,oBAAN,CAA2B;AACvBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKC,EAAL,GAAU,IAAIP,OAAJ,CAAY,WAAZ,CAAV;AAEA,QAAIQ,IAAI,GAAG;AACPC,MAAAA,IAAI,EAAE,IADC;AACKC,MAAAA,KAAK,EAAE,IADZ;AACkBC,MAAAA,MAAM,EAAE,iBAD1B;AAC6CC,MAAAA,YAAY,EAAE;AAAE,iBAAS;AAAX;AAD3D,KAAX;AAGA,SAAKL,EAAL,CAAQM,SAAR,CAAkBC,EAAlB,CAAqBR,UAArB,EAAiC;AAAEG,MAAAA,IAAI,EAAE,IAAR;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAAjC;AACA,SAAKH,EAAL,CAAQM,SAAR,CAAkBE,IAAlB,CAAuBT,UAAvB,EAAmCE,IAAnC;AACA,SAAKD,EAAL,CAAQS,WAAR,CAAoB;AAChBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,CAAC,eAAD;AAAV;AADS,KAApB;AAGH,GAZsB,CAcvB;;;AACAC,EAAAA,SAAS,CAACC,EAAD,EAAK;AACV,SAAKb,EAAL,CAAQc,OAAR,CAAgB;AACZC,MAAAA,KAAK,EAAE,KADK;AAEZb,MAAAA,IAAI,EAAE;AAFM,KAAhB,EAGGc,EAHH,CAGM,QAHN,EAGgBH,EAHhB;AAIH,GApBsB,CAsBvB;;;AACAI,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKjB,EAAL,CAAQkB,OAAR,CAAgB;AAAEC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAAhB,EACFC,IADE,CACGC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAeC,IAAI,IAAIA,IAAI,CAACC,GAA5B,CADZ,CAAP;AAEH;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC7B,WAAO,KAAK5B,EAAL,CAAQ6B,IAAR,CAAa;AAAEC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,aAAa,EAAEH,SAAS,CAACI,QAAV;AAAjB;AAAZ,KAAb,EACFX,IADE,CACGC,KAAK,IAAIA,KAAK,CAACW,IADlB,CAAP;AAEH;;AAED,QAAMC,mBAAN,CAA0BN,SAA1B,EAAqC;AACjC,QAAIO,SAAS,GAAG,MAAM,KAAKR,qBAAL,CAA2BC,SAA3B,CAAtB;AACA,QAAIQ,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAIC,QAAT,IAAqBF,SAArB,EAAgC;AAC5BC,MAAAA,UAAU,CAACC,QAAQ,CAACC,YAAV,CAAV,GAAoCF,UAAU,CAACC,QAAQ,CAACC,YAAV,CAAV,IAAqC,EAAzE;AACAF,MAAAA,UAAU,CAACC,QAAQ,CAACC,YAAV,CAAV,CAAkCC,IAAlC,CAAuCF,QAAvC;AACH;;AACD,WAAOG,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBZ,GAAxB,CAA4Bc,YAAY,KAAK;AAAEA,MAAAA,YAAF;AAAgBH,MAAAA,SAAS,EAAEC,UAAU,CAACE,YAAD;AAArC,KAAL,CAAxC,CAAP;AACH;;AAzCsB;;AA6C3B,eAAe,IAAIzC,oBAAJ,CAAyBF,MAAM,CAAC+C,OAAP,CAAeC,aAAxC,CAAf","sourcesContent":["import PouchDB from 'pouchdb';\nimport PouchDBFind from 'pouchdb-find';\nimport config from '../config';\nPouchDB.plugin(PouchDBFind);\n\nclass pouchDbVisiteService {\n    constructor(pouchDbUrl) {\n        this.db = new PouchDB('controles');\n\n        var opts = {\n            live: true, retry: true, filter: 'filter/by_agent', query_params: { \"agent\": 4447 }\n        };\n        this.db.replicate.to(pouchDbUrl, { live: true, retry: true });\n        this.db.replicate.from(pouchDbUrl, opts);\n        this.db.createIndex({\n            index: { fields: ['DOSSIER_IDENT'] }\n        });\n    }\n\n    //call the callback on db changes\n    onChanges(cb) {\n        this.db.changes({\n            since: 'now',\n            live: true\n        }).on('change', cb);\n    }\n\n    //getAllDocsOfTheDB\n    getAllDocs() {\n        return this.db.allDocs({ include_docs: true, descending: true })\n            .then(table => table.rows.map(item => item.doc));\n    }\n\n    getControlesByDossier(dossierID) {\n        return this.db.find({ selector: { DOSSIER_IDENT: dossierID.toString() } })\n            .then(table => table.docs);\n    }\n\n    async getVisitesByDossier(dossierID) {\n        let controles = await this.getControlesByDossier(dossierID);\n        let visitesDic = {};\n        for (let controle of controles) {\n            visitesDic[controle.VISITE_IDENT] = visitesDic[controle.VISITE_IDENT] || [];\n            visitesDic[controle.VISITE_IDENT].push(controle)\n        }\n        return Object.keys(visitesDic).map(VISITE_IDENT => ({ VISITE_IDENT, controles: visitesDic[VISITE_IDENT] }));\n    }\n\n}\n\nexport default new pouchDbVisiteService(config.couchDb.url_controles);"]},"metadata":{},"sourceType":"module"}