{"map":"{\"version\":3,\"sources\":[\"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/AddDocs.js\",\"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/App.js\",\"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/serviceWorker.js\",\"/Users/antoine/Documents/DGCCRF/dgccrf-front/src/index.js\"],\"names\":[\"AddDocs\",\"_React$Component\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"text\",\"list\",\"db\",\"PouchDB\",\"remoteCouch\",\"changes\",\"since\",\"live\",\"on\",\"updateTodos\",\"bind\",\"assertThisInitialized\",\"opts\",\"filter\",\"query_params\",\"agent\",\"user\",\"replicate\",\"to\",\"console\",\"log\",\"from\",\"addTodo\",\"inherits\",\"createClass\",\"key\",\"value\",\"_this2\",\"allDocs\",\"include_docs\",\"descending\",\"err\",\"doc\",\"setState\",\"rows\",\"map\",\"row\",\"todo\",\"_id\",\"Date\",\"toISOString\",\"put\",\"result\",\"_this3\",\"react_default\",\"a\",\"createElement\",\"onChange\",\"e\",\"target\",\"placeholder\",\"onClick\",\"getTodos\",\"JSON\",\"stringify\",\"React\",\"Component\",\"App\",\"validated\",\"AddDocs_AddDocs\",\"isLocalhost\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"registerValidSW\",\"swUrl\",\"config\",\"navigator\",\"serviceWorker\",\"register\",\"then\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"controller\",\"onUpdate\",\"onSuccess\",\"catch\",\"error\",\"ReactDOM\",\"render\",\"App_App\",\"document\",\"getElementById\",\"URL\",\"process\",\"href\",\"origin\",\"addEventListener\",\"concat\",\"fetch\",\"response\",\"contentType\",\"headers\",\"get\",\"status\",\"indexOf\",\"ready\",\"unregister\",\"reload\",\"checkValidServiceWorker\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport './App.css';\\nimport PouchDB from 'pouchdb';\\n\\n\\nexport class AddDocs extends React.Component {\\n\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      text : '',\\n      list:[]\\n    }\\n\\n    this.db = new PouchDB('my_database');\\n    var remoteCouch = 'http://Admin:pass@172.17.64.137:5984/test';\\n\\n    this.db.changes({\\n      since: 'now',\\n      live: true\\n    }).on('change', this.updateTodos.bind(this));\\n\\n    var opts = {\\n        live: true, \\n        filter: 'filter/by_agent',\\n        query_params: { \\\"agent\\\": this.props.user },\\n    };\\n    this.db.replicate.to(remoteCouch, {live:true}, console.log);\\n    this.db.replicate.from(remoteCouch, opts, console.log);\\n    this.updateTodos();\\n\\n    this.updateTodos = this.updateTodos.bind(this);\\n    this.addTodo = this.addTodo.bind(this);\\n  }\\n\\n\\n  updateTodos(){\\n    this.db.allDocs({include_docs: true, descending: true}, (err, doc) => {\\n      this.setState({list:doc.rows.map(row=>row.doc)});\\n    });\\n  }\\n\\n  addTodo(text,user) {\\n    var todo = {\\n      _id: new Date().toISOString(),\\n      text: text,\\n      user: user\\n    };\\n    this.db.put(todo, function callback(err, result) {\\n      if (!err) {\\n        console.log('Successfully posted a todo!');\\n      }\\n    });\\n  }\\n  \\n  render() {\\n    return (\\n      <div>\\n        <input onChange = {(e)=>this.setState({text:e.target.value})} placeholder=\\\"Text\\\"/> \\n        <button onClick={()=>this.addTodo(this.state.text,this.props.user)}>Ajouter</button>\\n        <button onClick={()=>this.getTodos()}>refresh</button>\\n        <div>\\n          {JSON.stringify(this.state.list)}\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\n\",\"import React from 'react';\\nimport './App.css';\\nimport {AddDocs} from './AddDocs';\\n\\nexport class App extends React.Component{\\n  constructor(props){\\n    super(props);\\n    this.state = {\\n      user: '',\\n      validated: false\\n    };\\n  }\\n\\n  render(){\\n    return (\\n      \\n        ! this.state.validated ?\\n        <div>\\n          <input onChange = {(e)=>this.setState({user:e.target.value})} placeholder=\\\"User\\\"/> \\n          <button onClick = {(e)=>this.setState({validated:true})}>Valider</button>\\n        </div>\\n        :<AddDocs user={this.state.user} />\\n    )\\n  }\\n}\\n\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport {App} from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.register();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(e,t,n){},21:function(e,t,n){e.exports=n(30)},26:function(e,t,n){},30:function(e,t,n){\"use strict\";n.r(t);var o=n(0),a=n.n(o),r=n(19),i=n.n(r),c=(n(26),n(6)),s=n(7),l=n(9),u=n(8),d=n(10),f=(n(16),n(5)),h=n(20),v=function(e){function t(e){var n;Object(c.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={text:\"\",list:[]},n.db=new h.a(\"my_database\");var o=\"http://Admin:pass@172.17.64.137:5984/test\";n.db.changes({since:\"now\",live:!0}).on(\"change\",n.updateTodos.bind(Object(f.a)(n)));var a={live:!0,filter:\"filter/by_agent\",query_params:{agent:n.props.user}};return n.db.replicate.to(o,{live:!0},console.log),n.db.replicate.from(o,a,console.log),n.updateTodos(),n.updateTodos=n.updateTodos.bind(Object(f.a)(n)),n.addTodo=n.addTodo.bind(Object(f.a)(n)),n}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"updateTodos\",value:function(){var e=this;this.db.allDocs({include_docs:!0,descending:!0},function(t,n){e.setState({list:n.rows.map(function(e){return e.doc})})})}},{key:\"addTodo\",value:function(e,t){var n={_id:(new Date).toISOString(),text:e,user:t};this.db.put(n,function(e,t){e||console.log(\"Successfully posted a todo!\")})}},{key:\"render\",value:function(){var e=this;return a.a.createElement(\"div\",null,a.a.createElement(\"input\",{onChange:function(t){return e.setState({text:t.target.value})},placeholder:\"Text\"}),a.a.createElement(\"button\",{onClick:function(){return e.addTodo(e.state.text,e.props.user)}},\"Ajouter\"),a.a.createElement(\"button\",{onClick:function(){return e.getTodos()}},\"refresh\"),a.a.createElement(\"div\",null,JSON.stringify(this.state.list)))}}]),t}(a.a.Component),p=function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).state={user:\"\",validated:!1},n}return Object(d.a)(t,e),Object(s.a)(t,[{key:\"render\",value:function(){var e=this;return this.state.validated?a.a.createElement(v,{user:this.state.user}):a.a.createElement(\"div\",null,a.a.createElement(\"input\",{onChange:function(t){return e.setState({user:t.target.value})},placeholder:\"User\"}),a.a.createElement(\"button\",{onClick:function(t){return e.setState({validated:!0})}},\"Valider\"))}}]),t}(a.a.Component),b=Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function g(e,t){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var n=e.installing;null!=n&&(n.onstatechange=function(){\"installed\"===n.state&&(navigator.serviceWorker.controller?(console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\"),t&&t.onUpdate&&t.onUpdate(e)):(console.log(\"Content is cached for offline use.\"),t&&t.onSuccess&&t.onSuccess(e)))})}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}i.a.render(a.a.createElement(p,null),document.getElementById(\"root\")),function(e){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location.href).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var t=\"\".concat(\"\",\"/service-worker.js\");b?(function(e,t){fetch(e).then(function(n){var o=n.headers.get(\"content-type\");404===n.status||null!=o&&-1===o.indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):g(e,t)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(t,e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\")})):g(t,e)})}}()}},[[21,1,2]]]);","extractedComments":[]}